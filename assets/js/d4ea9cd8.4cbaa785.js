"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[439],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3294:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={id:"redux_motivation",title:"Redux Motivation",sidebar_label:"Motivation",hide_title:!0},c=void 0,l={unversionedId:"extensions/redux/redux_motivation",id:"extensions/redux/redux_motivation",title:"Redux Motivation",description:"Motivation",source:"@site/docs/extensions/redux/motivation.md",sourceDirName:"extensions/redux",slug:"/extensions/redux/redux_motivation",permalink:"/Kotlin-Bloc/docs/extensions/redux/redux_motivation",draft:!1,tags:[],version:"current",frontMatter:{id:"redux_motivation",title:"Redux Motivation",sidebar_label:"Motivation",hide_title:!0},sidebar:"extensionsSidebar",previous:{title:"Bloc Observer",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_bloc_observer"},next:{title:"Setup",permalink:"/Kotlin-Bloc/docs/extensions/redux/redux_setup"}},u={},p=[{value:"Motivation",id:"motivation",level:2}],d={toc:p};function f(e){var t=e.components,s=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"Blocs are components designed to take care of a specific part of the business logic. Typically their scope is similar to a view model scope. Creating a more than basic app will require to compose blocs into larger business logic components. There are different ways to achieve this (e.g. use the same ",(0,i.kt)("inlineCode",{parentName:"p"},"BlocState")," in multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Blocs")," or use a ",(0,i.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state#bloc-isa-blocstate"},(0,i.kt)("inlineCode",{parentName:"a"},"Bloc")," as ",(0,i.kt)("inlineCode",{parentName:"a"},"BlocState")),") but one option is particularly enticing:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Bloc Redux",src:n(6961).Z,width:"2776",height:"1763"})),(0,i.kt)("p",null,"A Redux store is a state container holding the application's state. While there can be more than one store, the intended pattern is to have only a single store (",(0,i.kt)("a",{parentName:"p",href:"https://redux.js.org/faq/store-setup"},"https://redux.js.org/faq/store-setup"),"). A Redux store seems to be a good candidate for sharing state between ",(0,i.kt)("inlineCode",{parentName:"p"},"Blocs")," if we find a way to slice and dice the global state tree into smaller bits to serve as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Bloc's")," state (which is exactly what this extension allows us to do)."))}f.isMDXComponent=!0},6961:function(e,t,n){t.Z=n.p+"assets/images/Bloc Architecture - Bloc Redux-202ba13771e008b7d5c4129a13957a4e.svg"}}]);