"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1845],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(k,i(i({ref:t},u),{},{components:n})):o.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4353:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s}});var o=n(3117),r=(n(7294),n(3905));const a={id:"counter",title:"Counter",sidebar_label:"Counter",hide_title:!0},i=void 0,l={unversionedId:"examples/counter",id:"examples/counter",title:"Counter",description:"Counter",source:"@site/docs/examples/counter.md",sourceDirName:"examples",slug:"/examples/counter",permalink:"/Kotlin-Bloc/docs/examples/counter",draft:!1,tags:[],version:"current",frontMatter:{id:"counter",title:"Counter",sidebar_label:"Counter",hide_title:!0},sidebar:"exampleSidebar",previous:{title:"Introduction",permalink:"/Kotlin-Bloc/docs/examples/"},next:{title:"Books",permalink:"/Kotlin-Bloc/docs/examples/books"}},c={},s=[{value:"Counter",id:"counter",level:2},{value:"Counter 1",id:"counter-1",level:3},{value:"Counter 2",id:"counter-2",level:3},{value:"Counter 3",id:"counter-3",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"counter"},"Counter"),(0,r.kt)("p",null,'The "Hello World" sample of UI frameworks is the counter app. There are three sample implementations in this framework that demonstrate:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"how to use a ",(0,r.kt)("inlineCode",{parentName:"li"},"Bloc")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"BlocState")),(0,r.kt)("li",{parentName:"ul"},"how to use a Redux store as ",(0,r.kt)("inlineCode",{parentName:"li"},"BlocState")),(0,r.kt)("li",{parentName:"ul"},"how to define a ",(0,r.kt)("inlineCode",{parentName:"li"},"Bloc")," in the view itself (Android only)")),(0,r.kt)("h3",{id:"counter-1"},"Counter 1"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/1gravity/Kotlin-Bloc/blob/master/bloc-samples/src/commonMain/kotlin/com/onegravity/bloc/sample/counter/SimpleCounter.kt"},"SimpleCounter")," demonstrates how a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," can be used as ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState")," (see also ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state#bloc-isa-blocstate"},"Bloc is a BlocState"),') basically intercepting the "communication" between a ',(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," and it's ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState"),". "),(0,r.kt)("p",null,'All it takes to "convert" a ',(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState")," is the extension function ",(0,r.kt)("inlineCode",{parentName:"p"},"asBlocState()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun bloc(context: BlocContext) = bloc<Int, Action>(\n  context,\n  interceptorBloc1(context, 1).asBlocState()\n) {\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Using a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState")," is not recommended. All business logic related to a view component should be implemented in a single bloc. Even the ",(0,r.kt)("inlineCode",{parentName:"p"},"auditTrailBloc")," in the example that just adds some logging, isn't a good example because an audit trail would typically be implemented at the source of truth and that's the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState"),", not some intercepting ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc"),".")),(0,r.kt)("h3",{id:"counter-2"},"Counter 2"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/1gravity/Kotlin-Bloc/blob/master/bloc-samples/src/commonMain/kotlin/com/onegravity/bloc/sample/counter/ReduxCounter.kt"},"ReduxCounter")," demonstrates how a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," connects to a Redux store as it's ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocState"),". The store intentionally has a more complex model than what we need for a simple counter to demonstrate how to compose reducers for different ",(0,r.kt)("inlineCode",{parentName:"p"},"Blocs")," and how to select sub state:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// the model\ndata class Purpose(val title: String, val description: String)\ndata class Counter(val count: Int, val lastValue: Int)\ndata class ReduxModel(val purpose: Purpose, val counter: Counter)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// reducers\nprivate fun purposeReducer(state: Purpose, action: Any) = when (action) {\n    is ReduxAction.UpdateTitle -> state.copy(title = action.value)\n    is ReduxAction.UpdateDescription -> state.copy(description = action.value)\n    else -> state\n}\n\nprivate fun counterReducer(state: CounterStore.Counter, action: Any) = when (action) {\n    is ReduxAction.UpdateCount -> Counter(action.value, state.count)\n    else -> state\n}\n\nprivate fun rootReducer(state: CounterStore.ReduxModel, action: Any) = ReduxModel(\n    purpose = purposeReducer(state.purpose, action),\n    counter = counterReducer(state.counter, action)\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// select sub state\nreduxStore.toBlocState(\n  context = context,\n  select = { reduxModel ->  reduxModel.counter },\n  map = { model -> model.count }\n)\n")),(0,r.kt)("h3",{id:"counter-3"},"Counter 3"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/1gravity/Kotlin-Bloc/blob/master/androidApp/src/main/kotlin/com/onegravity/bloc/counter/CounterActivityCompose.kt"},"third implementation"),' is Android only and moves the "business logic" right into the ',(0,r.kt)("inlineCode",{parentName:"p"},"View")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"Activity"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CounterActivityCompose : AppCompatActivity() {\n\n    private val bloc by getOrCreate { bloc<Int, Int>(it, 1) { reduce { state + action } } }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContent {\n            // observe State\n            val state by bloc.observeState()\n\n            // display State\n            Text(text = stringResource(R.string.counter_value, state))\n            \n            // send Actions to the Bloc\n            Button(\n              onClick = { bloc.send(1) },\n              content = { Text(text = "Increment") }\n            )\n            Button(\n              onClick = { bloc.send(-1) },\n              content = { Text(text = "Decrement") }\n            )\n        }\n    }\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Typically the business logic is in a shared component so it can be used in Android and iOS. ")))}p.isMDXComponent=!0}}]);