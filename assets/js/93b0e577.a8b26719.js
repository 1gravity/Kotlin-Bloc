"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[783],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,m=d["".concat(s,".").concat(u)]||d[u]||b[u]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1627:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return b}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"bloc_observable",title:"Bloc Observable",sidebar_label:"Bloc Observable",hide_title:!0},s=void 0,c={unversionedId:"architecture/blocowner/bloc_observable",id:"architecture/blocowner/bloc_observable",title:"Bloc Observable",description:"BlocObservable",source:"@site/docs/architecture/blocowner/bloc_observable.md",sourceDirName:"architecture/blocowner",slug:"/architecture/blocowner/bloc_observable",permalink:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable",draft:!1,tags:[],version:"current",frontMatter:{id:"bloc_observable",title:"Bloc Observable",sidebar_label:"Bloc Observable",hide_title:!0},sidebar:"architectureSidebar",previous:{title:"Bloc Owner",permalink:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_owner"}},p={},b=[{value:"BlocObservable",id:"blocobservable",level:2},{value:"BlocObservableOwner",id:"blocobservableowner",level:2},{value:"Adapter",id:"adapter",level:3}],d={toc:b};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"blocobservable"},"BlocObservable"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," is an object with a ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe()")," function to observe state changes and side effects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public fun subscribe(\n    lifecycle: Lifecycle,\n    state: (suspend (state: State) -> Unit)? = null,\n    sideEffect: (suspend (sideEffect: SideEffect) -> Unit)? = null\n)\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The subscription is tied to the (Essenty) lifecycle of the caller (see ",(0,o.kt)("a",{parentName:"p",href:"../bloc/lifecycle"},"Lifecycle"),") meaning with an ",(0,o.kt)("inlineCode",{parentName:"p"},"onStop()")," event, the subscription ends as well."))),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," also exposes the bloc's current state as the ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe()"),"'s state function will only be called when the bloc's state changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public val value: State\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You will likely never call this directly but use one of the ",(0,o.kt)("a",{parentName:"p",href:"../../extensions/android/android_subscription"},"extension functions"),"."))),(0,o.kt)("h2",{id:"blocobservableowner"},"BlocObservableOwner"),(0,o.kt)("p",null,"Sometimes a component should not expose the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bloc")," as it would when implementing the ",(0,o.kt)("a",{parentName:"p",href:"bloc_owner"},"BlocOwner")," interface. If a component only requires users to observe the bloc's state and side effects (no actions or actions are encapsulated by the component), ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," is the right choice."),(0,o.kt)("p",null,"While a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocOwner")," exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bloc")," as property, ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," as property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface BlocObservableOwner<out State : Any, out SideEffect : Any> {\n    public val observable: BlocObservable<State, SideEffect>\n}\n")),(0,o.kt)("p",null,"While ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocOwner"),' gives the implementing class the ability to use the "MVVM+" syntax, ',(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," gives users of an implementing class the ability to observe state and side effects with a single ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// the ViewModel implements BlocObservableOwner\nviewModel.subscribe(this, state = ::observeState, sideEffect = ::observeSideEffects)\n\nprivate fun observeState(state: State) {\n    // process the new state\n    when (state) {\n        Empty -> showEmptyPage()\n        Loading -> showLoadingPage()\n        is Loaded -> showContent(state)\n        is Failure -> showError(state)\n    }\n}\n\nprivate fun observeSideEffects(target: Target) {\n    // process side effects\n    navigateTo(target)\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As you can see in the ",(0,o.kt)("a",{parentName:"p",href:"#blocobservable"},"subscribe function's signature"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sideEffect")," are optional arguments so you can subscribe to both or just one of the them."))),(0,o.kt)("h3",{id:"adapter"},"Adapter"),(0,o.kt)("p",null,"To simplify the implementation of a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"toObservable()"),' to "convert" a ',(0,o.kt)("inlineCode",{parentName:"p"},"Bloc"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// we can keep the Bloc private!\nprivate val bloc = bloc(blocContext(context))\n\n// and only expose the BlocObservable\noverride val observable = bloc.toObservable()\n")))}u.isMDXComponent=!0}}]);