"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[966],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9001:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"architecture_overview",title:"Architecture Overview",hide_title:!0,sidebar_label:"Overview"},s=void 0,c={unversionedId:"architecture/architecture_overview",id:"architecture/architecture_overview",title:"Architecture Overview",description:"Goals",source:"@site/docs/architecture/architecture.md",sourceDirName:"architecture",slug:"/architecture/",permalink:"/Kotlin-Bloc/docs/architecture/",draft:!1,tags:[],version:"current",frontMatter:{id:"architecture_overview",title:"Architecture Overview",hide_title:!0,sidebar_label:"Overview"},sidebar:"architectureSidebar",next:{title:"Overview",permalink:"/Kotlin-Bloc/docs/architecture/bloc/"}},p={},u=[{value:"Goals",id:"goals",level:2},{value:"Inspiration",id:"inspiration",level:2},{value:"Design patterns",id:"design-patterns",level:4},{value:"Frameworks",id:"frameworks",level:4},{value:"Design",id:"design",level:2}],m={toc:u};function d(e){var t=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"goals"},"Goals"),(0,i.kt)("p",null,"The architectural goals of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," framework are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"be platform-agnostic, reactive and composable"),(0,i.kt)("li",{parentName:"ul"},"be minimalistic / lightweight -> no over-engineering"),(0,i.kt)("li",{parentName:"ul"},"simple concurrency model"),(0,i.kt)("li",{parentName:"ul"},"users write very little code"),(0,i.kt)("li",{parentName:"ul"},"be as un-opinionated as possible -> support different ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," technologies, programming styles, app complexities and team sizes")),(0,i.kt)("h2",{id:"inspiration"},"Inspiration"),(0,i.kt)("p",null,"The architecture was inspired by the following design patterns and UI frameworks (among others):"),(0,i.kt)("h4",{id:"design-patterns"},"Design patterns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MVI (Model-View-Intent)"),(0,i.kt)("li",{parentName:"ul"},"MVVM (Model-View-ViewModel)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://sam.js.org"},"SAM")),(0,i.kt)("li",{parentName:"ul"},"Redux"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=RS36gBEp8OI"},"Flutter BloC"))),(0,i.kt)("h4",{id:"frameworks"},"Frameworks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://orbit-mvi.org"},"Orbit")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arkivanov.github.io/MVIKotlin"},"Kotlin MVI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://reduxkotlin.org"},"Redux Kotlin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/genaku/Reduce"},"Reduce")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arkivanov.github.io/Decompose/"},"Decompose"))),(0,i.kt)("h2",{id:"design"},"Design"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Bloc Architecture - Overview",src:n(2131).Z,width:"1595",height:"982"})),(0,i.kt)("p",null,"The framework has two main components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"Bloc")," (Business Logic Component) encapsulates your application's business logic. It receives ",(0,i.kt)("strong",{parentName:"li"},"Action(s)")," from the view, processes those actions and outputs ",(0,i.kt)("strong",{parentName:"li"},"Proposals")," and optionally ",(0,i.kt)("strong",{parentName:"li"},"SideEffect(s)"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"BlocState")," holds the component's ",(0,i.kt)("strong",{parentName:"li"},"State"),". It's separate from the actual Bloc to support different scenarios like:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"share state between business logic components"),(0,i.kt)("li",{parentName:"ul"},"persist state (database, network)"),(0,i.kt)("li",{parentName:"ul"},"use a global state container like Redux"),(0,i.kt)("li",{parentName:"ul"},"others...")))),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"View")," is obviously an important component too but technically not part of the framework itself (although there are ",(0,i.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/extensions/overview"},"extensions")," that support/simplify the implementation for different target platforms)."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Reducers in ",(0,i.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Proposal")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"State"),". While in many cases they have the same type, thanks to ",(0,i.kt)("inlineCode",{parentName:"p"},"Proposals"),":"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"BlocState]"),' has the "power" to enforce domain specific rules like address validation or enrichment'),(0,i.kt)("li",{parentName:"ul"},"it's easy to connect a Redux store to a ",(0,i.kt)("inlineCode",{parentName:"li"},"Bloc")," (as its ",(0,i.kt)("inlineCode",{parentName:"li"},"BlocState"),"), in which case ",(0,i.kt)("inlineCode",{parentName:"li"},"Proposals")," become Redux actions (see ",(0,i.kt)("a",{parentName:"li",href:"./extensions/redux/redux_motivation"},"Redux"),")"),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"Blocs")," as ",(0,i.kt)("inlineCode",{parentName:"li"},"BlocsState")," (see ",(0,i.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state#bloc-isa-blocstate"},"Bloc isA BlocState"),")")),(0,i.kt)("p",{parentName:"div"},"The idea of ",(0,i.kt)("inlineCode",{parentName:"p"},"Proposals")," was inspired by the ",(0,i.kt)("a",{parentName:"p",href:"https://sam.js.org/"},"SAM pattern"),"."))),(0,i.kt)("p",null,"Not surprisingly the Flutter Bloc nomenclature is used for some of the other components / sub-components of this architecture as well:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"Sink")," is a destination for arbitrary data and used to send data from one to the next component. The processing of the data is either synchronous or asynchronous depending on the receiver."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"Stream"),' is a source of asynchronous data. Stream are always "hot" meaning data is emitted regardless whether a component is listening (or subscribed or collecting -> different names for the same thing). The streams for ',(0,i.kt)("inlineCode",{parentName:"li"},"State")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"SideEffect"),"s have important differences that will be explained in detail in ",(0,i.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/bloc/"},"Bloc")," and in ",(0,i.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state"},"Bloc State"),".")))}d.isMDXComponent=!0},2131:function(e,t,n){t.Z=n.p+"assets/images/Bloc Architecture - Bloc Overview-b26fa075737aadf3f3553a44d8d9c0e4.svg"}}]);