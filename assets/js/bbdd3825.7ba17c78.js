"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[570],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5148:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"todo",title:"To Do",sidebar_label:"To Do",hide_title:!0},s=void 0,c={unversionedId:"examples/todo",id:"examples/todo",title:"To Do",description:"To Do",source:"@site/docs/examples/todo.md",sourceDirName:"examples",slug:"/examples/todo",permalink:"/Kotlin-Bloc/docs/examples/todo",draft:!1,tags:[],version:"current",frontMatter:{id:"todo",title:"To Do",sidebar_label:"To Do",hide_title:!0},sidebar:"exampleSidebar",previous:{title:"Posts",permalink:"/Kotlin-Bloc/docs/examples/posts"}},p={},u=[{value:"To Do",id:"to-do",level:2},{value:"Bloc",id:"bloc",level:3},{value:"BlocState",id:"blocstate",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"to-do"},"To Do"),(0,a.kt)("p",null,"The ToDo example's purpose is to demonstrate how state can be persisted. There's only an Android implementation because the ui part isn't very interesting."),(0,a.kt)("h3",{id:"bloc"},"Bloc"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Bloc")," itself comes with no surprises and hence we won't discuss the details. The only part worth mentioning is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bloc")," declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun toDoBloc(context: BlocContext) = bloc<List<ToDo>, ToDoAction>(\n    context = context,\n//    blocState = blocState(emptyList())                              // non persisting BlocState\n    blocState = PersistingToDoState(CoroutineScope(SupervisorJob()))  // persisting BlocState\n) {\n")),(0,a.kt)("p",null,"As you can see, the ",(0,a.kt)("inlineCode",{parentName:"p"},"blocState")," parameter is either a regular ",(0,a.kt)("inlineCode",{parentName:"p"},"BlocState")," (using ",(0,a.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state_builder"},"BlocStateBuilder"),") or ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistingToDoState")," which, as the name implies, persists the state (using ",(0,a.kt)("a",{parentName:"p",href:"https://cashapp.github.io/sqldelight/"},"SQLDelight"),"). Which one is used is completely transparent for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bloc"),"."),(0,a.kt)("h3",{id:"blocstate"},"BlocState"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistingToDoState")," class extends ",(0,a.kt)("inlineCode",{parentName:"p"},"BlocStateBase")," which provides a full ",(0,a.kt)("inlineCode",{parentName:"p"},"BlocState")," implementation minus the ",(0,a.kt)("inlineCode",{parentName:"p"},"send()")," function. There are really just two parts to our ",(0,a.kt)("inlineCode",{parentName:"p"},"PersistingToDoState"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"send()")," function which upserts the ",(0,a.kt)("inlineCode",{parentName:"li"},"Proposal")," = a list of todo into the database if the todo has changed"),(0,a.kt)("li",{parentName:"ol"},"the initializer bloc that connects to the database and subscribes to updates to the todo table and sends those updates to the ",(0,a.kt)("inlineCode",{parentName:"li"},"StateStream")," (or rather ",(0,a.kt)("inlineCode",{parentName:"li"},"MutableStateStream"),")")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PersistingToDoState(\n    coroutineScope: CoroutineScope\n) : BlocStateBase<List<ToDo>, List<ToDo>>(\n    initialState = emptyList()\n) {\n\n    private val dao = getKoinInstance<ToDoDao>()\n\n    init {\n        coroutineScope.launch(Dispatchers.Default) {\n            dao.getFlow().collect { state.send(it) }\n        }\n    }\n\n    override fun send(proposal: List<ToDo>) {\n        proposal.forEach { newTodo ->\n            val oldTodo = value.firstOrNull { it.uuid == newTodo.uuid }\n            if (newTodo != oldTodo) {\n                dao.upsert(newTodo.uuid, newTodo.description, newTodo.completed)\n            }\n        }\n    }\n}\n")))}m.isMDXComponent=!0}}]);