"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6783],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||b[d]||a;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1627:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return s}});var r=n(3117),o=(n(7294),n(3905));const a={id:"bloc_observable",title:"Bloc Observable",sidebar_label:"Bloc Observable",hide_title:!0},l=void 0,i={unversionedId:"architecture/blocowner/bloc_observable",id:"architecture/blocowner/bloc_observable",title:"Bloc Observable",description:"BlocObservable",source:"@site/docs/architecture/blocowner/bloc_observable.md",sourceDirName:"architecture/blocowner",slug:"/architecture/blocowner/bloc_observable",permalink:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable",draft:!1,tags:[],version:"current",frontMatter:{id:"bloc_observable",title:"Bloc Observable",sidebar_label:"Bloc Observable",hide_title:!0},sidebar:"architectureSidebar",previous:{title:"Bloc Owner",permalink:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_owner"}},c={},s=[{value:"BlocObservable",id:"blocobservable",level:2},{value:"BlocObservableOwner",id:"blocobservableowner",level:2},{value:"Adapter",id:"adapter",level:3}],p={toc:s};function b(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"blocobservable"},"BlocObservable"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," is an object with a ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe()")," function to observe state changes and side effects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public fun subscribe(\n    lifecycle: Lifecycle,\n    state: (suspend (state: State) -> Unit)? = null,\n    sideEffect: (suspend (sideEffect: SideEffect) -> Unit)? = null\n)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The subscription is tied to the (Essenty) lifecycle of the caller (see ",(0,o.kt)("a",{parentName:"p",href:"../bloc/lifecycle"},"Lifecycle"),") meaning with an ",(0,o.kt)("inlineCode",{parentName:"p"},"onStop()")," event, the subscription ends as well.")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," also exposes the bloc's current state as the ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe()"),"'s state function will only be called when the bloc's state changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public val value: State\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You will likely never call this directly but use one of the ",(0,o.kt)("a",{parentName:"p",href:"../../extensions/android/android_subscription"},"extension functions"),".")),(0,o.kt)("h2",{id:"blocobservableowner"},"BlocObservableOwner"),(0,o.kt)("p",null,"Sometimes a component should not expose the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bloc")," as it would when implementing the ",(0,o.kt)("a",{parentName:"p",href:"bloc_owner"},"BlocOwner")," interface. If a component only requires users to observe the bloc's state and side effects (no actions or actions are encapsulated by the component), ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," is the right choice."),(0,o.kt)("p",null,"While a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocOwner")," exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"Bloc")," as property, ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservable")," as property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface BlocObservableOwner<out State : Any, out SideEffect : Any> {\n    public val observable: BlocObservable<State, SideEffect>\n}\n")),(0,o.kt)("p",null,"While ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocOwner"),' gives the implementing class the ability to use the "MVVM+" syntax, ',(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner")," gives users of an implementing class the ability to observe state and side effects with a single ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// the ViewModel implements BlocObservableOwner\nviewModel.subscribe(this, state = ::observeState, sideEffect = ::observeSideEffects)\n\nprivate fun observeState(state: State) {\n    // process the new state\n    when (state) {\n        Empty -> showEmptyPage()\n        Loading -> showLoadingPage()\n        is Loaded -> showContent(state)\n        is Failure -> showError(state)\n    }\n}\n\nprivate fun observeSideEffects(target: Target) {\n    // process side effects\n    navigateTo(target)\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"As you can see in the ",(0,o.kt)("a",{parentName:"p",href:"#blocobservable"},"subscribe function's signature"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sideEffect")," are optional arguments so you can subscribe to both or just one of the them.")),(0,o.kt)("h3",{id:"adapter"},"Adapter"),(0,o.kt)("p",null,"To simplify the implementation of a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlocObservableOwner"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"toObservable()"),' to "convert" a ',(0,o.kt)("inlineCode",{parentName:"p"},"Bloc"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// we can keep the Bloc private!\nprivate val bloc = bloc(blocContext(context))\n\n// and only expose the BlocObservable\noverride val observable = bloc.toObservable()\n")))}b.isMDXComponent=!0}}]);