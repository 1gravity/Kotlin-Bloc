"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5355],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),b=r,u=m["".concat(c,".").concat(b)]||m[b]||d[b]||a;return n?o.createElement(u,i(i({ref:t},p),{},{components:n})):o.createElement(u,i({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7251:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s}});var o=n(3117),r=(n(7294),n(3905));const a={id:"android_compose",title:"Jetpack Compose",sidebar_label:"Compose",hide_title:!0},i=void 0,l={unversionedId:"extensions/android/android_compose",id:"extensions/android/android_compose",title:"Jetpack Compose",description:"Dependency",source:"@site/docs/extensions/android/compose.md",sourceDirName:"extensions/android",slug:"/extensions/android/android_compose",permalink:"/Kotlin-Bloc/docs/extensions/android/android_compose",draft:!1,tags:[],version:"current",frontMatter:{id:"android_compose",title:"Jetpack Compose",sidebar_label:"Compose",hide_title:!0},sidebar:"extensionsSidebar",previous:{title:"Subscription",permalink:"/Kotlin-Bloc/docs/extensions/android/android_subscription"},next:{title:"Overview",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_overview"}},c={},s=[{value:"Dependency",id:"dependency",level:2},{value:"observeState",id:"observestate",level:2},{value:"observeSideEffects",id:"observesideeffects",level:2},{value:"Composable Preview",id:"composable-preview",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"dependency"},"Dependency"),(0,r.kt)("p",null,"To use the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/compose"},"Jetpack Compose")," extensions please add the ",(0,r.kt)("inlineCode",{parentName:"p"},"bloc-compose")," artifact as a dependency in the Gradle build file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("com.1gravity:bloc-compose:0.9.1")\n')),(0,r.kt)("h2",{id:"observestate"},"observeState"),(0,r.kt)("p",null,"Observing a bloc's state in a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/runtime/Composable"},"Composable")," is very easy due to the ",(0,r.kt)("inlineCode",{parentName:"p"},"observeState")," extensions functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun MyComposable(bloc: MyBloc)\n    val state by bloc.observeState()\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," property above is of type ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/kotlin/androidx/compose/runtime/State"},"State")," so state changes will trigger the ",(0,r.kt)("inlineCode",{parentName:"p"},"Composable")," to recompose."),(0,r.kt)("p",null,"Here's a more comprehensive example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Composable\nfun ToDo(bloc: Bloc<List<ToDo>, ToDoAction, Unit>) {\n    val state: List<ToDo> by bloc.observeState()\n\n    var text: String by rememberSaveable { mutableStateOf("") }\n\n    Column {\n        TextField(\n            value = text,\n            onValueChange = { text = it },\n            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n            keyboardActions = KeyboardActions(\n                onDone = {\n                    // when we hit the enter key, add a new todo item to our list\n                    bloc.send(AddToDo(text))\n                    text = ""\n                },\n            )\n        )\n\n        LazyColumn {\n            // the list of todo items will update automatically when items are \n            // added, removed or modified\n            items(state) { todo ->\n                Row {\n                    Checkbox(\n                        // updates automatically when the item\'s completion status changes\n                        checked = todo.completed,\n                        onCheckedChange = { \n                            // this will modify the todo item\'s completion status\n                            bloc.send(ToggleToDo(todo.uuid)) \n                        }\n                    )\n                    Text(text = todo.description)\n                }\n            }\n        }\n    }\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"observeState")," is available for ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/bloc/"},"Bloc"),", ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_owner"},"BlowOwner"),", ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable#blocobservable"},"BlowObservable")," and ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable#blocobservableowner"},"BlocObservableOwner"),".")),(0,r.kt)("h2",{id:"observesideeffects"},"observeSideEffects"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"observeSideEffects")," is the equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"observeState")," but for side effects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\ninternal fun MenuEntries(bloc: MenuBloc) {\n    val sideEffect by bloc.observeSideEffects()\n\n    sideEffect?.let { menuEntry ->\n        val context = LocalContext.current\n        val intent = Intent(context, menuItem2Activity[menuEntry])\n        context.startActivity(intent)\n    }\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"observeSideEffects")," is available for ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/bloc/"},"Bloc"),", ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_owner"},"BlowOwner"),", ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable#blocobservable"},"BlowObservable")," and ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/blocowner/bloc_observable#blocobservableowner"},"BlocObservableOwner"),".")),(0,r.kt)("h2",{id:"composable-preview"},"Composable Preview"),(0,r.kt)("p",null,"To create ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/jetpack/compose/tooling"},"Composable Previews")," use the ",(0,r.kt)("inlineCode",{parentName:"p"},"previewBlocContext()")," function that creates a ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/bloc/bloc_context"},"BlocContext")," which is required to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Preview\n@Composable\nfun MenuEntriesPreview() {\n    val bloc = MainMenuCompose.bloc(previewBlocContext())\n    MenuEntries(bloc, Modifier.fillMaxWidth().fillMaxHeight())\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"previewBlocContext()")," creates a ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/bloc/lifecycle"},"Lifecycle")," tied to the lifecycle of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Composable")," so it's shorter lived than the \"real\" lifecycle but it's good enough for a preview.")))}d.isMDXComponent=!0}}]);