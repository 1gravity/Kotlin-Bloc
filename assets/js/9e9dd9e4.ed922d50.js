"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1761],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(k,i(i({ref:t},u),{},{components:n})):o.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8393:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return c}});var o=n(3117),a=(n(7294),n(3905));const r={id:"books",title:"Books",sidebar_label:"Books",hide_title:!0},i=void 0,l={unversionedId:"examples/books",id:"examples/books",title:"Books",description:"Books",source:"@site/docs/examples/books.md",sourceDirName:"examples",slug:"/examples/books",permalink:"/Kotlin-Bloc/docs/examples/books",draft:!1,tags:[],version:"current",frontMatter:{id:"books",title:"Books",sidebar_label:"Books",hide_title:!0},sidebar:"exampleSidebar",previous:{title:"Counter",permalink:"/Kotlin-Bloc/docs/examples/counter"},next:{title:"Calculator",permalink:"/Kotlin-Bloc/docs/examples/calculator"}},s={},c=[{value:"Books",id:"books",level:2},{value:"Share State",id:"share-state",level:3},{value:"Asynchronous Code",id:"asynchronous-code",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"books"},"Books"),(0,a.kt)("p",null,"The books sample apps (taken from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/genaku/Reduce"},"Reduce"),"), demonstrates:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"how to share ",(0,a.kt)("inlineCode",{parentName:"li"},"BlocState")," between ",(0,a.kt)("inlineCode",{parentName:"li"},"Blocs")),(0,a.kt)("li",{parentName:"ul"},"how to run asynchronous code")),(0,a.kt)("h3",{id:"share-state"},"Share State"),(0,a.kt)("p",null,"One advantage of separating the business logic component (",(0,a.kt)("inlineCode",{parentName:"p"},"Bloc"),") from the actual state holder (",(0,a.kt)("inlineCode",{parentName:"p"},"BlocState"),") is that the latter can be shared by multiple blocs.\nThe books example "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// define the shared state\nprivate val commonState = blocState<BookState>(BookState.Empty)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// first Bloc to use the commonState\nprivate val clearBloc = bloc<BookState, BookAction.Clear>(\n  context, \n  commonState\n) {\n  // business logic\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// second Bloc to use the commonState\nprivate val loadBloc = bloc<BookState, BookAction>(\n  context, \n  commonState\n) {\n  // business logic\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Since both blocs share the same state, only one of them needs to be observed by the view (they expose the same state):"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val observable = loadBloc.toObservable()\n"))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If the blocs had side effects, they would not be shared and thus an observer needed to observe both blocs.")),(0,a.kt)("h3",{id:"asynchronous-code"},"Asynchronous Code"),(0,a.kt)("p",null,"The example uses a ",(0,a.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/architecture/bloc/thunk"},"Thunk"),' to load the data "asynchronously" (the repository uses ',(0,a.kt)("inlineCode",{parentName:"p"},"delay()")," to simulate an asynchronous call):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"thunk<BookAction.Load> {\n  dispatch(BookAction.Loading)\n  val nextAction = repository.loadBooks().toAction()\n  dispatch(nextAction)\n}\n\nreduce<BookAction.Loading> { BookState.Loading }\nreduce<BookAction.LoadComplete> { action.result.toState() }\n")),(0,a.kt)("p",null,"The code shows a typical pattern for thunks:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'it dispatches a loading action which a reducer reduces to some "loading" state'),(0,a.kt)("li",{parentName:"ol"},"it executes an asynchronous operation"),(0,a.kt)("li",{parentName:"ol"},"it dispatches an action with the result of that asynchronous operation which will result in another state update by a reducer ")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Reducers are suspended functions as well and can launch coroutines (see ",(0,a.kt)("a",{parentName:"p",href:"../architecture/bloc/coroutine_launcher"},"Coroutine Launcher"),") -> reducers can theoretically run asynchronous code as well. While there's nothing preventing you from doing that, don't:"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},"A thunk's purpose is to run asynchronous code, a reducer's purpose is to reduce state based on ui events. Trying to use a component for something they aren't built for, will inevitably lead to problems."),(0,a.kt)("li",{parentName:"ol"},"Reducers run sequentially. Consequentially this will update the state to ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeState")," first before processing ",(0,a.kt)("inlineCode",{parentName:"li"},"SomeAction"),":")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"reduce {\n  bloc.send(<SomeAction>)\n  <SomeState>\n}\n")),(0,a.kt)("ol",{parentName:"admonition",start:3},(0,a.kt)("li",{parentName:"ol"},"Reducers expect ",(0,a.kt)("inlineCode",{parentName:"li"},"State")," as return value. You can theoretically do something like this:")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// use your own CoroutineScope here\nwithContext(coroutineScope.coroutineContext) {\n  // do asynchronous stuff\n  BookState.Loading\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"or:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// use your own CoroutineScope here\ncoroutineScope.async {\n // do asynchronous stuff\n BookState.Loading\n}.await()\n")),(0,a.kt)("p",{parentName:"admonition"},"The ui however is waiting for a state update in response to some user interaction (responsiveness) -> this is an anti-pattern.")))}p.isMDXComponent=!0}}]);