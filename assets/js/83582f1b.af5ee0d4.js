"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[966],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9001:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var n=a(3117),r=(a(7294),a(3905));const i={id:"architecture_overview",title:"Architecture Overview",hide_title:!0,sidebar_label:"Overview"},o=void 0,l={unversionedId:"architecture/architecture_overview",id:"architecture/architecture_overview",title:"Architecture Overview",description:"Inspiration",source:"@site/docs/architecture/architecture.md",sourceDirName:"architecture",slug:"/architecture/",permalink:"/Kotlin-Bloc/docs/architecture/",draft:!1,tags:[],version:"current",frontMatter:{id:"architecture_overview",title:"Architecture Overview",hide_title:!0,sidebar_label:"Overview"},sidebar:"architectureSidebar",next:{title:"Overview",permalink:"/Kotlin-Bloc/docs/architecture/bloc/"}},s={},c=[{value:"Inspiration",id:"inspiration",level:2},{value:"Design patterns",id:"design-patterns",level:4},{value:"Frameworks",id:"frameworks",level:4},{value:"Learnings",id:"learnings",level:4},{value:"Goals",id:"goals",level:2},{value:"Design",id:"design",level:2}],p={toc:c};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"inspiration"},"Inspiration"),(0,r.kt)("p",null,"The architecture was inspired by the following design patterns and UI frameworks (among others):"),(0,r.kt)("h4",{id:"design-patterns"},"Design patterns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MVI (Model-View-Intent)"),(0,r.kt)("li",{parentName:"ul"},"MVVM (Model-View-ViewModel)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://sam.js.org"},"SAM")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=RS36gBEp8OI"},"Flutter BloC"))),(0,r.kt)("h4",{id:"frameworks"},"Frameworks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://orbit-mvi.org"},"Orbit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://arkivanov.github.io/MVIKotlin"},"Kotlin MVI")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reduxkotlin.org"},"Redux Kotlin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/genaku/Reduce"},"Reduce")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://arkivanov.github.io/Decompose/"},"Decompose")),(0,r.kt)("li",{parentName:"ul"},"Redux")),(0,r.kt)("h4",{id:"learnings"},"Learnings"),(0,r.kt)("p",null,"The essential ideas we take from them are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"data flowing between model and view is immutable"),(0,r.kt)("li",{parentName:"ul"},"data flows unidirectional from the view to the model and back"),(0,r.kt)("li",{parentName:"ul"},"data flows are reactive"),(0,r.kt)("li",{parentName:"ul"},"every concern is mapped to a component or a function to have clear separation"),(0,r.kt)("li",{parentName:"ul"},"functions are first-class citizens")),(0,r.kt)("h2",{id:"goals"},"Goals"),(0,r.kt)("p",null,"The architectural goals of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," framework are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Be ",(0,r.kt)("strong",{parentName:"li"},"platform-agnostic"),": it\u2019s a KMM framework so this is obvious."),(0,r.kt)("li",{parentName:"ul"},"Be ",(0,r.kt)("strong",{parentName:"li"},"reactive"),": reactive UIs have become the standard in recent years for good reasons."),(0,r.kt)("li",{parentName:"ul"},"Be ",(0,r.kt)("strong",{parentName:"li"},"composable"),": ability to decompose the ui into small components and combine them into larger components again."),(0,r.kt)("li",{parentName:"ul"},"Be as ",(0,r.kt)("strong",{parentName:"li"},"un-opinionated")," as possible: support different technologies, programming styles, app complexities and team sizes."),(0,r.kt)("li",{parentName:"ul"},"Be ",(0,r.kt)("strong",{parentName:"li"},"minimalistic")," and ",(0,r.kt)("strong",{parentName:"li"},"lightweight"),": some existing frameworks are very comprehensive but are heavyweight and require to write lots of boilerplate code (e.g. ",(0,r.kt)("a",{parentName:"li",href:"https://arkivanov.github.io/Decompose/"},"Decompose"),"). Strict contracts between components (leading to boilerplate code) are crucial in larger teams but they can bog down the team\u2019s productivity when speed is crucial (and in smaller teams). A more strict approach should be supported but not enforced."),(0,r.kt)("li",{parentName:"ul"},"Be ",(0,r.kt)("strong",{parentName:"li"},"predictable"),": the order of execution (synchronous and asynchronous) and the concurrency model must be clearly specified and lead to predictable and repeatable outcome.")),(0,r.kt)("h2",{id:"design"},"Design"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Bloc Architecture - Overview",src:a(2131).Z,width:"1595",height:"982"})),(0,r.kt)("p",null,"The framework has two main components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"Bloc")," (Business Logic Component) encapsulates your application's business logic. It receives ",(0,r.kt)("strong",{parentName:"li"},"Action(s)")," from the view, processes those actions and outputs ",(0,r.kt)("strong",{parentName:"li"},"Proposals")," and optionally ",(0,r.kt)("strong",{parentName:"li"},"SideEffect(s)"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"BlocState")," holds the component's ",(0,r.kt)("strong",{parentName:"li"},"State"),". It's separate from the actual Bloc to support different scenarios like:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"share state between business logic components"),(0,r.kt)("li",{parentName:"ul"},"persist state (database, network)"),(0,r.kt)("li",{parentName:"ul"},"use a global state container like Redux"),(0,r.kt)("li",{parentName:"ul"},"others...")))),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"View")," is obviously an important component too but technically not part of the framework itself (although there are ",(0,r.kt)("a",{parentName:"p",href:"/Kotlin-Bloc/docs/extensions/overview"},"extensions")," that support/simplify the implementation for different target platforms)."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Reducers in ",(0,r.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposal")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"State"),". While in many cases they have the same type, thanks to ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposals"),":"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"BlocState]"),' has the "power" to enforce domain specific rules like address validation or enrichment'),(0,r.kt)("li",{parentName:"ul"},"it's easy to connect a Redux store to a ",(0,r.kt)("inlineCode",{parentName:"li"},"Bloc")," (as its ",(0,r.kt)("inlineCode",{parentName:"li"},"BlocState"),"), in which case ",(0,r.kt)("inlineCode",{parentName:"li"},"Proposals")," become Redux actions (see ",(0,r.kt)("a",{parentName:"li",href:"./extensions/redux/redux_motivation"},"Redux"),")"),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"Blocs")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"BlocsState")," (see ",(0,r.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state#bloc-isa-blocstate"},"Bloc isA BlocState"),")")),(0,r.kt)("p",{parentName:"admonition"},"The idea of ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposals")," was inspired by the ",(0,r.kt)("a",{parentName:"p",href:"https://sam.js.org/"},"SAM pattern"),".")),(0,r.kt)("p",null,"Not surprisingly the Flutter Bloc nomenclature is used for some of the other components / sub-components of this architecture as well:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"Sink")," is a destination for arbitrary data and used to send data from one to the next component. The processing of the data is either synchronous or asynchronous depending on the receiver."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"Stream"),' is a source of asynchronous data. Stream are always "hot" meaning data is emitted regardless whether a component is listening (or subscribed or collecting -> different names for the same thing). The streams for ',(0,r.kt)("inlineCode",{parentName:"li"},"State")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SideEffect"),"s have important differences that will be explained in detail in ",(0,r.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/bloc/"},"Bloc")," and in ",(0,r.kt)("a",{parentName:"li",href:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state"},"Bloc State"),".")))}u.isMDXComponent=!0},2131:function(e,t,a){t.Z=a.p+"assets/images/Bloc Architecture - Bloc Overview-b26fa075737aadf3f3553a44d8d9c0e4.svg"}}]);