"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3162],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),u=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),f=r,h=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?o.createElement(h,a(a({ref:n},s),{},{components:t})):o.createElement(h,a({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4467:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var o=t(3117),r=(t(7294),t(3905));const i={id:"coroutine_launcher",title:"Coroutine Launcher",sidebar_label:"Coroutine Launcher",hide_title:!0},a=void 0,l={unversionedId:"architecture/bloc/coroutine_launcher",id:"architecture/bloc/coroutine_launcher",title:"Coroutine Launcher",description:"Coroutine Launcher",source:"@site/docs/architecture/bloc/launcher.md",sourceDirName:"architecture/bloc",slug:"/architecture/bloc/coroutine_launcher",permalink:"/Kotlin-Bloc/docs/architecture/bloc/coroutine_launcher",draft:!1,tags:[],version:"current",frontMatter:{id:"coroutine_launcher",title:"Coroutine Launcher",sidebar_label:"Coroutine Launcher",hide_title:!0},sidebar:"architectureSidebar",previous:{title:"Bloc Context",permalink:"/Kotlin-Bloc/docs/architecture/bloc/bloc_context"},next:{title:"Overview",permalink:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state"}},c={},u=[{value:"Coroutine Launcher",id:"coroutine-launcher",level:2},{value:"Flavor 1: JobConfig",id:"flavor-1-jobconfig",level:3},{value:"Flavor 2: No JobConfig",id:"flavor-2-no-jobconfig",level:3}],s={toc:u};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"coroutine-launcher"},"Coroutine Launcher"),(0,r.kt)("p",null,"There are extension functions for ",(0,r.kt)("inlineCode",{parentName:"p"},"InitializerContext"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ThunkContext")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ReducerContext"),' to launch coroutines from initializers, thunks and reducers.\nThey come in two "flavors":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// flavor 1\nthunk {\n    launch(JobConfig(cancelPrevious = true, jobId = "MyJob")) {\n        // some asynchronous code\n    }\n}\n\n// flavor 2\nthunk {\n    launch {\n        // some asynchronous code\n    }\n}\n\n')),(0,r.kt)("h3",{id:"flavor-1-jobconfig"},"Flavor 1: JobConfig"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"JobConfig")," has two properties:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cancelPrevious"),": If set to false (default) a coroutine is simply launched, no additional checks. If set to true however, all previous jobs that were started with the same ",(0,r.kt)("inlineCode",{parentName:"li"},"jobId"),", will be cancelled and the coroutine is suspended till all jobs have finished (cancelAndJoin)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"jobId"),": if ",(0,r.kt)("inlineCode",{parentName:"li"},"cancelPrevious"),' is true, then the jobId can be used to group different jobs together to make sure only one of them is run at a time. The jobId defaults to "DefaultJobId".')),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"JobConfig")," we can e.g. launch/cancel asynchronous operations when a thunk is triggered multiple times like in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// the user can select multiple posts within a brief period of time\nfun onSelected(post: Post) = thunk {\n    // only load if not already being loaded and if a different post was selected\n    if (loadingJob != null && state.id != post.id) {\n\n        // we cancel a previous loading job before starting a new one from the Bloc's CoroutineScope \n        // -> it's also cancelled when the Bloc is stopped\n        launch(JobConfig(true)) {\n            load(post)\n        }\n\n    }\n}\n")),(0,r.kt)("h3",{id:"flavor-2-no-jobconfig"},"Flavor 2: No JobConfig"),(0,r.kt)("p",null,"If a coroutine needs to be launched regardless whether there's already a job running for the same action, just do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"fun onSelected(post: Post) = thunk {\n    // only load if not already being loaded and if a different post was selected\n    if (loadingJob != null && state.id != post.id) {\n        \n        launch {\n            load(post)\n        }\n        \n    }\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CoroutineScope"),' could be exposed through the context (InitializerContext, ThunkContext, ReducerContext) in order to facilitate the launch of new coroutines. However I decided to encapsulate that scope to prevent "unauthorized interventions" (like cancellations). This design decision could be changed in the future.')))}d.isMDXComponent=!0}}]);