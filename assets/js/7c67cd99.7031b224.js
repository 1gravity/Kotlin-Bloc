"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3162],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),u=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),f=r,h=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?o.createElement(h,i(i({ref:n},s),{},{components:t})):o.createElement(h,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4467:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"coroutine_launcher",title:"Coroutine Launcher",sidebar_label:"Coroutine Launcher",hide_title:!0},c=void 0,u={unversionedId:"architecture/bloc/coroutine_launcher",id:"architecture/bloc/coroutine_launcher",title:"Coroutine Launcher",description:"Coroutine Launcher",source:"@site/docs/architecture/bloc/launcher.md",sourceDirName:"architecture/bloc",slug:"/architecture/bloc/coroutine_launcher",permalink:"/Kotlin-Bloc/docs/architecture/bloc/coroutine_launcher",draft:!1,tags:[],version:"current",frontMatter:{id:"coroutine_launcher",title:"Coroutine Launcher",sidebar_label:"Coroutine Launcher",hide_title:!0},sidebar:"architectureSidebar",previous:{title:"Bloc Context",permalink:"/Kotlin-Bloc/docs/architecture/bloc/bloc_context"},next:{title:"Overview",permalink:"/Kotlin-Bloc/docs/architecture/blocstate/bloc_state"}},s={},d=[{value:"Coroutine Launcher",id:"coroutine-launcher",level:2},{value:"Flavor 1: JobConfig",id:"flavor-1-jobconfig",level:3},{value:"Flavor 2: No JobConfig",id:"flavor-2-no-jobconfig",level:3}],p={toc:d};function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"coroutine-launcher"},"Coroutine Launcher"),(0,a.kt)("p",null,"There are extension functions for ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializerContext"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ThunkContext")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ReducerContext"),' to launch coroutines from initializers, thunks and reducers.\nThey come in two "flavors":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// flavor 1\nthunk {\n    launch(JobConfig(cancelPrevious = true, jobId = "MyJob")) {\n        // some asynchronous code\n    }\n}\n\n// flavor 2\nthunk {\n    launch {\n        // some asynchronous code\n    }\n}\n\n')),(0,a.kt)("h3",{id:"flavor-1-jobconfig"},"Flavor 1: JobConfig"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"JobConfig")," has two properties:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cancelPrevious"),": If set to false (default) a coroutine is simply launched, no additional checks. If set to true however, all previous jobs that were started with the same ",(0,a.kt)("inlineCode",{parentName:"li"},"jobId"),", will be cancelled and the coroutine is suspended till all jobs have finished (cancelAndJoin)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"jobId"),": if ",(0,a.kt)("inlineCode",{parentName:"li"},"cancelPrevious"),' is true, then the jobId can be used to group different jobs together to make sure only one of them is run at a time. The jobId defaults to "DefaultJobId".')),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"JobConfig")," we can e.g. launch/cancel asynchronous operations when a thunk is triggered multiple times like in this example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// the user can select multiple posts within a brief period of time\nfun onSelected(post: Post) = thunk {\n    // only load if not already being loaded and if a different post was selected\n    if (loadingJob != null && state.id != post.id) {\n\n        // we cancel a previous loading job before starting a new one from the Bloc's CoroutineScope \n        // -> it's also cancelled when the Bloc is stopped\n        launch(JobConfig(true)) {\n            load(post)\n        }\n\n    }\n}\n")),(0,a.kt)("h3",{id:"flavor-2-no-jobconfig"},"Flavor 2: No JobConfig"),(0,a.kt)("p",null,"If a coroutine needs to be launched regardless whether there's already a job running for the same action, just do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fun onSelected(post: Post) = thunk {\n    // only load if not already being loaded and if a different post was selected\n    if (loadingJob != null && state.id != post.id) {\n        \n        launch {\n            load(post)\n        }\n        \n    }\n}\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CoroutineScope"),' could be exposed through the context (InitializerContext, ThunkContext, ReducerContext) in order to facilitate the launch of new coroutines. However I decided to encapsulate that scope to prevent "unauthorized interventions" (like cancellations). This design decision could be temporary.'))))}f.isMDXComponent=!0}}]);