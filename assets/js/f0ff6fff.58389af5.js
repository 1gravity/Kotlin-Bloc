"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3667],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,v=f["".concat(c,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(v,s(s({ref:t},u),{},{components:n})):r.createElement(v,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7728:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return l}});var r=n(3117),o=(n(7294),n(3905));const i={id:"ios_overview",title:"Overview",sidebar_label:"Overview",hide_title:!0},s=void 0,a={unversionedId:"extensions/ios/ios_overview",id:"extensions/ios/ios_overview",title:"Overview",description:"Overview",source:"@site/docs/extensions/ios/overview.md",sourceDirName:"extensions/ios",slug:"/extensions/ios/ios_overview",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_overview",draft:!1,tags:[],version:"current",frontMatter:{id:"ios_overview",title:"Overview",sidebar_label:"Overview",hide_title:!0},sidebar:"extensionsSidebar",previous:{title:"Compose",permalink:"/Kotlin-Bloc/docs/extensions/android/android_compose"},next:{title:"Bloc Holder",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_bloc_holder"}},c={},l=[{value:"Overview",id:"overview",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"Blocs")," on iOS isn't as straight forward as using it on Android. That's mostly because Kotlin and Swift have some fundamental differences and also because Objective-C sits in between the two languages as the \"interface language\". One of the culprits that made the integration in Swift difficult is the fact that:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Generics can only be defined on classes, not on interfaces (protocols in Objective-C and Swift) or functions\n",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/native-objc-interop.html"},"https://kotlinlang.org/docs/native-objc-interop.html"),".")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," uses generic types extensively and while some interfaces could be converted to abstract classes to better support iOS, the numerous extension functions that make ",(0,o.kt)("inlineCode",{parentName:"p"},"Kotlin Bloc")," so powerful, still need to use generic types."),(0,o.kt)("p",null,"At least in ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/xcode/swiftui/"},"SwiftUI")," the integration with blocs isn't too bad once we add some helper classes though."))}p.isMDXComponent=!0}}]);