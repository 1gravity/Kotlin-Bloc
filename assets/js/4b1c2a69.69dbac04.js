"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1622],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),s=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(a,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(f,c(c({ref:t},p),{},{components:n})):o.createElement(f,c({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=u;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var s=2;s<i;s++)c[s]=n[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6018:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var o=n(3117),r=(n(7294),n(3905));const i={id:"ios_bloc_component",title:"Bloc Component",sidebar_label:"Bloc Component",hide_title:!0},c=void 0,l={unversionedId:"extensions/ios/ios_bloc_component",id:"extensions/ios/ios_bloc_component",title:"Bloc Component",description:"BlocComponent",source:"@site/docs/extensions/ios/bloc_component.md",sourceDirName:"extensions/ios",slug:"/extensions/ios/ios_bloc_component",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_bloc_component",draft:!1,tags:[],version:"current",frontMatter:{id:"ios_bloc_component",title:"Bloc Component",sidebar_label:"Bloc Component",hide_title:!0},sidebar:"extensionsSidebar",previous:{title:"Bloc Holder",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_bloc_holder"},next:{title:"Bloc Observer",permalink:"/Kotlin-Bloc/docs/extensions/ios/ios_bloc_observer"}},a={},s=[{value:"BlocComponent",id:"bloccomponent",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"bloccomponent"},"BlocComponent"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/1gravity/Kotlin-Bloc/blob/master/iosApp/iosApp/utils/BlocComponent.swift"},"BlocComponent")," class is very similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocHolder"),". The only difference is that the latter always wraps a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bloc")," while the former wraps an arbitrary component that needs a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocContext")," to be instantiated, e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"struct PostListView: View {\n    private let component = BlocComponent<PostsComponent> { PostsComponentImpl(context: $0) }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PostsComponentImpl(context: BlocContext) {\n\n    val bloc by lazy {\n        bloc<PostsRootState, PostsAction>(context, blocState) {\n            // build the bloc\n        }\n    }\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In both cases the generic types will be preserved.\nIn the case of a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocHolder"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocHolder")," itself declares the generic types (and also the bloc it wraps).\nIn the case of a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlocComponent"),", the wrapped component or rather the bloc it contains declares the generic types.")))}m.isMDXComponent=!0}}]);