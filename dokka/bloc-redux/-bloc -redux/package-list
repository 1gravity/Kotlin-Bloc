$dokka.format:html-v1
$dokka.linkExtension:html
$dokka.location:com.onegravity.bloc.redux.select////PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/index.html
$dokka.location:com.onegravity.bloc.redux.select//byRefEqualityCheck/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/by-ref-equality-check.html
$dokka.location:com.onegravity.bloc.redux.select//byValEqualityCheck/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/by-val-equality-check.html
$dokka.location:com.onegravity.bloc.redux.select//computationMemoizer/#kotlin.Function1[kotlin.Array[kotlin.Any],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/computation-memoizer.html
$dokka.location:com.onegravity.bloc.redux.select//select/Store<State>[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/select.html
$dokka.location:com.onegravity.bloc.redux.select//selectors/Store<State>[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[com.onegravity.bloc.redux.select.SelectorSubscriberBuilder[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/selectors.html
$dokka.location:com.onegravity.bloc.redux.select//singleInputMemoizer/#kotlin.Function1[kotlin.Array[kotlin.Any],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/single-input-memoizer.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/index.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/AbstractSelector/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/-abstract-selector.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/_recomputations/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/_recomputations.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/computeAndCount/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/compute-and-count.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/isChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/is-changed.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/memoizer/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/memoizer.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/recomputations/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/recomputations.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/recomputationsLastChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/recomputations-last-changed.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/resetChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/reset-changed.html
$dokka.location:com.onegravity.bloc.redux.select/AbstractSelector/signalChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-abstract-selector/signal-changed.html
$dokka.location:com.onegravity.bloc.redux.select/InputField///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-input-field/index.html
$dokka.location:com.onegravity.bloc.redux.select/InputField/InputField/#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[kotlin.Any,kotlin.Any,kotlin.Boolean]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-input-field/-input-field.html
$dokka.location:com.onegravity.bloc.redux.select/InputField/equalityCheck/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-input-field/equality-check.html
$dokka.location:com.onegravity.bloc.redux.select/InputField/fn/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-input-field/fn.html
$dokka.location:com.onegravity.bloc.redux.select/InputField/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-input-field/invoke.html
$dokka.location:com.onegravity.bloc.redux.select/Memoizer///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-memoizer/index.html
$dokka.location:com.onegravity.bloc.redux.select/Memoizer/memoize/#kotlin.Any#kotlin.Array[com.onegravity.bloc.redux.select.SelectorInput[kotlin.Any,kotlin.Any]]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-memoizer/memoize.html
$dokka.location:com.onegravity.bloc.redux.select/Selector///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/index.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/getIfChangedIn/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/get-if-changed-in.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/isChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/is-changed.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/onChangeIn/#TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/on-change-in.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/recomputations/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/recomputations.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/resetChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/reset-changed.html
$dokka.location:com.onegravity.bloc.redux.select/Selector/signalChanged/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector/signal-changed.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorBuilder///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-builder/index.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorBuilder/SelectorBuilder/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-builder/-selector-builder.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorBuilder/withSingleField/#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-builder/with-single-field.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorBuilder/withSingleFieldByValue/#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-builder/with-single-field-by-value.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorInput///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-input/index.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorInput/equalityCheck/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-input/equality-check.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorInput/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-input/invoke.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/index.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/SelectorSubscriberBuilder/#Store<State>[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/-selector-subscriber-builder.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/select/#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/select.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/selectorList/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/selector-list.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/selectorList2/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/selector-list2.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/state/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/state.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/store/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/store.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/withAnyChange/#kotlin.Function0[kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/with-any-change.html
$dokka.location:com.onegravity.bloc.redux.select/SelectorSubscriberBuilder/withAnyChangeFun/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux.select/-selector-subscriber-builder/with-any-change-fun.html
$dokka.location:com.onegravity.bloc.redux////PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/index.html
$dokka.location:com.onegravity.bloc.redux//disposableScope/BlocContext#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/disposable-scope.html
$dokka.location:com.onegravity.bloc.redux//reduxBlocState/#DisposableScope#Store<ReduxModel>[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[com.onegravity.bloc.redux.ReduxBlocStateBuilder[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/redux-bloc-state.html
$dokka.location:com.onegravity.bloc.redux//selectScoped/DisposableScope#Store<State>[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/select-scoped.html
$dokka.location:com.onegravity.bloc.redux//selectScoped/Store<State>[TypeParam(bounds=[kotlin.Any])]#DisposableScope#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/select-scoped.html
$dokka.location:com.onegravity.bloc.redux//toBlocState/Store<ReduxModel>[TypeParam(bounds=[kotlin.Any])]#BlocContext#Selector<ReduxModel, Model>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#Mapper<Model, State>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/to-bloc-state.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocState///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state/index.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocState/ReduxBlocState/#DisposableScope#Store<ReduxModel>[TypeParam(bounds=[kotlin.Any])]#Selector<ReduxModel, Model>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#Mapper<Model, State>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state/-redux-bloc-state.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocState/send/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state/send.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocState/store/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state/store.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilder///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder/index.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilder/map/#Mapper<Model, State>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder/map.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilder/select/#Selector<ReduxModel, Model>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder/select.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl///PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/index.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/ReduxBlocStateBuilderImpl/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/-redux-bloc-state-builder-impl.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/_mapper/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/_mapper.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/_selector/#/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/_selector.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/build/#DisposableScope#Store<ReduxModel>[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/build.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/map/#Mapper<Model, State>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/map.html
$dokka.location:com.onegravity.bloc.redux/ReduxBlocStateBuilderImpl/select/#Selector<ReduxModel, Model>[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/-bloc -redux/com.onegravity.bloc.redux/-redux-bloc-state-builder-impl/select.html
com.onegravity.bloc.redux
com.onegravity.bloc.redux.select

