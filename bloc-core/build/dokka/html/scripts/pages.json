[{"name":"abstract class AbstractSelector<S, O> : Selector<S, O> ","description":"com.onegravity.bloc.select.AbstractSelector","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/index.html","searchKeys":["AbstractSelector","abstract class AbstractSelector<S, O> : Selector<S, O> ","com.onegravity.bloc.select.AbstractSelector"]},{"name":"abstract fun accept(acceptor: Acceptor<Proposal, State>)","description":"com.onegravity.bloc.state.BlocStateBuilder.accept","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder/accept.html","searchKeys":["accept","abstract fun accept(acceptor: Acceptor<Proposal, State>)","com.onegravity.bloc.state.BlocStateBuilder.accept"]},{"name":"abstract fun build(): BlocState<State, State>","description":"com.onegravity.bloc.state.SimpleBlocStateBuilder.build","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder/build.html","searchKeys":["build","abstract fun build(): BlocState<State, State>","com.onegravity.bloc.state.SimpleBlocStateBuilder.build"]},{"name":"abstract fun d(msg: String)","description":"com.onegravity.bloc.utils.Logger.d","location":"bloc-core/com.onegravity.bloc.utils/-logger/d.html","searchKeys":["d","abstract fun d(msg: String)","com.onegravity.bloc.utils.Logger.d"]},{"name":"abstract fun e(msg: String, t: Throwable? = null)","description":"com.onegravity.bloc.utils.Logger.e","location":"bloc-core/com.onegravity.bloc.utils/-logger/e.html","searchKeys":["e","abstract fun e(msg: String, t: Throwable? = null)","com.onegravity.bloc.utils.Logger.e"]},{"name":"abstract fun i(msg: String)","description":"com.onegravity.bloc.utils.Logger.i","location":"bloc-core/com.onegravity.bloc.utils/-logger/i.html","searchKeys":["i","abstract fun i(msg: String)","com.onegravity.bloc.utils.Logger.i"]},{"name":"abstract fun isChanged(): Boolean","description":"com.onegravity.bloc.select.Selector.isChanged","location":"bloc-core/com.onegravity.bloc.select/-selector/is-changed.html","searchKeys":["isChanged","abstract fun isChanged(): Boolean","com.onegravity.bloc.select.Selector.isChanged"]},{"name":"abstract fun map(mapper: Mapper<Model, State>)","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.map","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder/map.html","searchKeys":["map","abstract fun map(mapper: Mapper<Model, State>)","com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.map"]},{"name":"abstract fun memoize(state: Any, vararg inputs: SelectorInput<Any, Any>): T","description":"com.onegravity.bloc.select.Memoizer.memoize","location":"bloc-core/com.onegravity.bloc.select/-memoizer/memoize.html","searchKeys":["memoize","abstract fun memoize(state: Any, vararg inputs: SelectorInput<Any, Any>): T","com.onegravity.bloc.select.Memoizer.memoize"]},{"name":"abstract fun resetChanged()","description":"com.onegravity.bloc.select.Selector.resetChanged","location":"bloc-core/com.onegravity.bloc.select/-selector/reset-changed.html","searchKeys":["resetChanged","abstract fun resetChanged()","com.onegravity.bloc.select.Selector.resetChanged"]},{"name":"abstract fun select(selector: Selector<ReduxModel, Model>)","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.select","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder/select.html","searchKeys":["select","abstract fun select(selector: Selector<ReduxModel, Model>)","com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.select"]},{"name":"abstract fun select(selector: Selector<ReduxModel, State>)","description":"com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder.select","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-simple-bloc-state-builder/select.html","searchKeys":["select","abstract fun select(selector: Selector<ReduxModel, State>)","com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder.select"]},{"name":"abstract fun send(value: Value)","description":"com.onegravity.bloc.utils.Sink.send","location":"bloc-core/com.onegravity.bloc.utils/-sink/send.html","searchKeys":["send","abstract fun send(value: Value)","com.onegravity.bloc.utils.Sink.send"]},{"name":"abstract fun signalChanged()","description":"com.onegravity.bloc.select.Selector.signalChanged","location":"bloc-core/com.onegravity.bloc.select/-selector/signal-changed.html","searchKeys":["signalChanged","abstract fun signalChanged()","com.onegravity.bloc.select.Selector.signalChanged"]},{"name":"abstract fun subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.utils.BlocObservable.subscribe","location":"bloc-core/com.onegravity.bloc.utils/-bloc-observable/subscribe.html","searchKeys":["subscribe","abstract fun subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.utils.BlocObservable.subscribe"]},{"name":"abstract fun w(msg: String)","description":"com.onegravity.bloc.utils.Logger.w","location":"bloc-core/com.onegravity.bloc.utils/-logger/w.html","searchKeys":["w","abstract fun w(msg: String)","com.onegravity.bloc.utils.Logger.w"]},{"name":"abstract operator fun invoke(state: S): I","description":"com.onegravity.bloc.select.SelectorInput.invoke","location":"bloc-core/com.onegravity.bloc.select/-selector-input/invoke.html","searchKeys":["invoke","abstract operator fun invoke(state: S): I","com.onegravity.bloc.select.SelectorInput.invoke"]},{"name":"abstract suspend fun collect(collector: <ERROR CLASS><Value>)","description":"com.onegravity.bloc.utils.StateStream.collect","location":"bloc-core/com.onegravity.bloc.utils/-state-stream/collect.html","searchKeys":["collect","abstract suspend fun collect(collector: <ERROR CLASS><Value>)","com.onegravity.bloc.utils.StateStream.collect"]},{"name":"abstract val bloc: Bloc<State, Action, SideEffect, Proposal>","description":"com.onegravity.bloc.utils.BlocOwner.bloc","location":"bloc-core/com.onegravity.bloc.utils/-bloc-owner/bloc.html","searchKeys":["bloc","abstract val bloc: Bloc<State, Action, SideEffect, Proposal>","com.onegravity.bloc.utils.BlocOwner.bloc"]},{"name":"abstract val equalityCheck: EqualityCheckFn","description":"com.onegravity.bloc.select.SelectorInput.equalityCheck","location":"bloc-core/com.onegravity.bloc.select/-selector-input/equality-check.html","searchKeys":["equalityCheck","abstract val equalityCheck: EqualityCheckFn","com.onegravity.bloc.select.SelectorInput.equalityCheck"]},{"name":"abstract val observable: BlocObservable<State, SideEffect>","description":"com.onegravity.bloc.utils.BlocObservableOwner.observable","location":"bloc-core/com.onegravity.bloc.utils/-bloc-observable-owner/observable.html","searchKeys":["observable","abstract val observable: BlocObservable<State, SideEffect>","com.onegravity.bloc.utils.BlocObservableOwner.observable"]},{"name":"abstract val recomputations: Long","description":"com.onegravity.bloc.select.Selector.recomputations","location":"bloc-core/com.onegravity.bloc.select/-selector/recomputations.html","searchKeys":["recomputations","abstract val recomputations: Long","com.onegravity.bloc.select.Selector.recomputations"]},{"name":"abstract val sideEffects: <ERROR CLASS><Value>","description":"com.onegravity.bloc.BlocFacade.sideEffects","location":"bloc-core/com.onegravity.bloc/-bloc-facade/side-effects.html","searchKeys":["sideEffects","abstract val sideEffects: <ERROR CLASS><Value>","com.onegravity.bloc.BlocFacade.sideEffects"]},{"name":"abstract val value: Value","description":"com.onegravity.bloc.utils.StateStream.value","location":"bloc-core/com.onegravity.bloc.utils/-state-stream/value.html","searchKeys":["value","abstract val value: Value","com.onegravity.bloc.utils.StateStream.value"]},{"name":"abstract var initialState: State","description":"com.onegravity.bloc.state.BlocStateBuilder.initialState","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder/initial-state.html","searchKeys":["initialState","abstract var initialState: State","com.onegravity.bloc.state.BlocStateBuilder.initialState"]},{"name":"abstract var initialState: State","description":"com.onegravity.bloc.state.SimpleBlocStateBuilder.initialState","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder/initial-state.html","searchKeys":["initialState","abstract var initialState: State","com.onegravity.bloc.state.SimpleBlocStateBuilder.initialState"]},{"name":"abstract var initialState: State","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.initialState","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder/initial-state.html","searchKeys":["initialState","abstract var initialState: State","com.onegravity.bloc.state.redux.ReduxBlocStateBuilder.initialState"]},{"name":"abstract var initialState: State","description":"com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder.initialState","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-simple-bloc-state-builder/initial-state.html","searchKeys":["initialState","abstract var initialState: State","com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder.initialState"]},{"name":"annotation class BlocDSL","description":"com.onegravity.bloc.utils.BlocDSL","location":"bloc-core/com.onegravity.bloc.utils/-bloc-d-s-l/index.html","searchKeys":["BlocDSL","annotation class BlocDSL","com.onegravity.bloc.utils.BlocDSL"]},{"name":"annotation class BlocInternal","description":"com.onegravity.bloc.utils.BlocInternal","location":"bloc-core/com.onegravity.bloc.utils/-bloc-internal/index.html","searchKeys":["BlocInternal","annotation class BlocInternal","com.onegravity.bloc.utils.BlocInternal"]},{"name":"annotation class BlocProtected","description":"com.onegravity.bloc.utils.BlocProtected","location":"bloc-core/com.onegravity.bloc.utils/-bloc-protected/index.html","searchKeys":["BlocProtected","annotation class BlocProtected","com.onegravity.bloc.utils.BlocProtected"]},{"name":"class BlocBuilder<State, Action : Any, SE, Proposal>","description":"com.onegravity.bloc.BlocBuilder","location":"bloc-core/com.onegravity.bloc/-bloc-builder/index.html","searchKeys":["BlocBuilder","class BlocBuilder<State, Action : Any, SE, Proposal>","com.onegravity.bloc.BlocBuilder"]},{"name":"class BlocImpl<State, Action : Any, SideEffect, Proposal>(blocContext: BlocContext, blocState: BlocState<State, Proposal>, initializer: Initializer<State, Action>, thunks: List<MatcherThunk<State, Action, Action>>, reducers: List<MatcherReducer<State, Action, Effect<Proposal, SideEffect>>>, dispatcher: <ERROR CLASS>) : Bloc<State, Action, SideEffect, Proposal> ","description":"com.onegravity.bloc.BlocImpl","location":"bloc-core/com.onegravity.bloc/-bloc-impl/index.html","searchKeys":["BlocImpl","class BlocImpl<State, Action : Any, SideEffect, Proposal>(blocContext: BlocContext, blocState: BlocState<State, Proposal>, initializer: Initializer<State, Action>, thunks: List<MatcherThunk<State, Action, Action>>, reducers: List<MatcherReducer<State, Action, Effect<Proposal, SideEffect>>>, dispatcher: <ERROR CLASS>) : Bloc<State, Action, SideEffect, Proposal> ","com.onegravity.bloc.BlocImpl"]},{"name":"class BlocStateBuilderImpl<State, Proposal> : BlocStateBuilder<State, Proposal> ","description":"com.onegravity.bloc.state.BlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder-impl/index.html","searchKeys":["BlocStateBuilderImpl","class BlocStateBuilderImpl<State, Proposal> : BlocStateBuilder<State, Proposal> ","com.onegravity.bloc.state.BlocStateBuilderImpl"]},{"name":"class DefaultBlocContext(lifecycle: <ERROR CLASS>, stateKeeper: <ERROR CLASS>?, instanceKeeper: <ERROR CLASS>?, backPressedHandler: <ERROR CLASS>?) : BlocContext","description":"com.onegravity.bloc.context.DefaultBlocContext","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/index.html","searchKeys":["DefaultBlocContext","class DefaultBlocContext(lifecycle: <ERROR CLASS>, stateKeeper: <ERROR CLASS>?, instanceKeeper: <ERROR CLASS>?, backPressedHandler: <ERROR CLASS>?) : BlocContext","com.onegravity.bloc.context.DefaultBlocContext"]},{"name":"class FragmentViewBindingDelegate<T : ViewBinding>(fragment: Fragment, viewBindingFactory: (View) -> T) : ReadOnlyProperty<Fragment, T> ","description":"com.onegravity.bloc.utils.FragmentViewBindingDelegate","location":"bloc-core/com.onegravity.bloc.utils/-fragment-view-binding-delegate/index.html","searchKeys":["FragmentViewBindingDelegate","class FragmentViewBindingDelegate<T : ViewBinding>(fragment: Fragment, viewBindingFactory: (View) -> T) : ReadOnlyProperty<Fragment, T> ","com.onegravity.bloc.utils.FragmentViewBindingDelegate"]},{"name":"class InputField<S, I>(fn: S.() -> I, equalityCheck: EqualityCheckFn) : SelectorInput<S, I> ","description":"com.onegravity.bloc.select.InputField","location":"bloc-core/com.onegravity.bloc.select/-input-field/index.html","searchKeys":["InputField","class InputField<S, I>(fn: S.() -> I, equalityCheck: EqualityCheckFn) : SelectorInput<S, I> ","com.onegravity.bloc.select.InputField"]},{"name":"class Matcher<SuperClazz : Any, out ChildClazz : SuperClazz>(clazz: KClass<ChildClazz>)","description":"com.onegravity.bloc.utils.Matcher","location":"bloc-core/com.onegravity.bloc.utils/-matcher/index.html","searchKeys":["Matcher","class Matcher<SuperClazz : Any, out ChildClazz : SuperClazz>(clazz: KClass<ChildClazz>)","com.onegravity.bloc.utils.Matcher"]},{"name":"class ReduxBlocState<State, Proposal : Any, Model : Any, ReduxModel : Any>(disposableScope: <ERROR CLASS>, initialState: State, store: <ERROR CLASS><ReduxModel>, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>) : BlocState<State, Proposal> ","description":"com.onegravity.bloc.state.redux.ReduxBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state/index.html","searchKeys":["ReduxBlocState","class ReduxBlocState<State, Proposal : Any, Model : Any, ReduxModel : Any>(disposableScope: <ERROR CLASS>, initialState: State, store: <ERROR CLASS><ReduxModel>, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>) : BlocState<State, Proposal> ","com.onegravity.bloc.state.redux.ReduxBlocState"]},{"name":"class ReduxSimpleBlocStateBuilderImpl<State : Any, ReduxModel : Any> : ReduxBlocStateBuilderImpl<State, State, ReduxModel> , ReduxSimpleBlocStateBuilder<State, ReduxModel> ","description":"com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-simple-bloc-state-builder-impl/index.html","searchKeys":["ReduxSimpleBlocStateBuilderImpl","class ReduxSimpleBlocStateBuilderImpl<State : Any, ReduxModel : Any> : ReduxBlocStateBuilderImpl<State, State, ReduxModel> , ReduxSimpleBlocStateBuilder<State, ReduxModel> ","com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilderImpl"]},{"name":"class SelectorBuilder<S : Any>","description":"com.onegravity.bloc.select.SelectorBuilder","location":"bloc-core/com.onegravity.bloc.select/-selector-builder/index.html","searchKeys":["SelectorBuilder","class SelectorBuilder<S : Any>","com.onegravity.bloc.select.SelectorBuilder"]},{"name":"class SelectorSubscriberBuilder<State : Any>(store: <ERROR CLASS><State>)","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/index.html","searchKeys":["SelectorSubscriberBuilder","class SelectorSubscriberBuilder<State : Any>(store: <ERROR CLASS><State>)","com.onegravity.bloc.select.SelectorSubscriberBuilder"]},{"name":"class SimpleBlocStateBuilderImpl<State> : SimpleBlocStateBuilder<State> ","description":"com.onegravity.bloc.state.SimpleBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder-impl/index.html","searchKeys":["SimpleBlocStateBuilderImpl","class SimpleBlocStateBuilderImpl<State> : SimpleBlocStateBuilder<State> ","com.onegravity.bloc.state.SimpleBlocStateBuilderImpl"]},{"name":"data class ActivityBlocContext(savedStateRegistry: SavedStateRegistry?, viewModelStore: ViewModelStore?, onBackPressedDispatcher: OnBackPressedDispatcher?)","description":"com.onegravity.bloc.ActivityBlocContext","location":"bloc-core/com.onegravity.bloc/-activity-bloc-context/index.html","searchKeys":["ActivityBlocContext","data class ActivityBlocContext(savedStateRegistry: SavedStateRegistry?, viewModelStore: ViewModelStore?, onBackPressedDispatcher: OnBackPressedDispatcher?)","com.onegravity.bloc.ActivityBlocContext"]},{"name":"data class Effect<Proposal, SideEffect>(proposal: Proposal?, sideEffects: List<SideEffect>)","description":"com.onegravity.bloc.utils.Effect","location":"bloc-core/com.onegravity.bloc.utils/-effect/index.html","searchKeys":["Effect","data class Effect<Proposal, SideEffect>(proposal: Proposal?, sideEffects: List<SideEffect>)","com.onegravity.bloc.utils.Effect"]},{"name":"data class InitializerContext<State, Action>(state: State, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.InitializerContext","location":"bloc-core/com.onegravity.bloc.utils/-initializer-context/index.html","searchKeys":["InitializerContext","data class InitializerContext<State, Action>(state: State, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.InitializerContext"]},{"name":"data class MatcherReducer<State, Action : Any, Proposal>(matcher: Matcher<Action, Action>?, reducer: Reducer<State, Action, Proposal>, expectsProposal: Boolean)","description":"com.onegravity.bloc.utils.MatcherReducer","location":"bloc-core/com.onegravity.bloc.utils/-matcher-reducer/index.html","searchKeys":["MatcherReducer","data class MatcherReducer<State, Action : Any, Proposal>(matcher: Matcher<Action, Action>?, reducer: Reducer<State, Action, Proposal>, expectsProposal: Boolean)","com.onegravity.bloc.utils.MatcherReducer"]},{"name":"data class MatcherThunk<State, Action : Any, A : Action>(matcher: Matcher<Action, Action>?, thunk: Thunk<State, Action, A>)","description":"com.onegravity.bloc.utils.MatcherThunk","location":"bloc-core/com.onegravity.bloc.utils/-matcher-thunk/index.html","searchKeys":["MatcherThunk","data class MatcherThunk<State, Action : Any, A : Action>(matcher: Matcher<Action, Action>?, thunk: Thunk<State, Action, A>)","com.onegravity.bloc.utils.MatcherThunk"]},{"name":"data class ReducerContext<State, Action>(state: State, action: Action, coroutineScope: <ERROR CLASS>)","description":"com.onegravity.bloc.utils.ReducerContext","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context/index.html","searchKeys":["ReducerContext","data class ReducerContext<State, Action>(state: State, action: Action, coroutineScope: <ERROR CLASS>)","com.onegravity.bloc.utils.ReducerContext"]},{"name":"data class ReducerContextNoAction<State>(state: State, scope: <ERROR CLASS>)","description":"com.onegravity.bloc.utils.ReducerContextNoAction","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context-no-action/index.html","searchKeys":["ReducerContextNoAction","data class ReducerContextNoAction<State>(state: State, scope: <ERROR CLASS>)","com.onegravity.bloc.utils.ReducerContextNoAction"]},{"name":"data class ThunkContext<State, Action, A : Action>(getState: <ERROR CLASS><State>, action: A, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.ThunkContext","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context/index.html","searchKeys":["ThunkContext","data class ThunkContext<State, Action, A : Action>(getState: <ERROR CLASS><State>, action: A, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.ThunkContext"]},{"name":"data class ThunkContextNoAction<State, Action>(getState: <ERROR CLASS><State>, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.ThunkContextNoAction","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context-no-action/index.html","searchKeys":["ThunkContextNoAction","data class ThunkContextNoAction<State, Action>(getState: <ERROR CLASS><State>, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.ThunkContextNoAction"]},{"name":"fun <A : Action> addReducer(matcher: Matcher<Action, A>, reducer: Reducer<State, Action, Effect<Proposal, SE>>, expectsProposal: Boolean)","description":"com.onegravity.bloc.BlocBuilder.addReducer","location":"bloc-core/com.onegravity.bloc/-bloc-builder/add-reducer.html","searchKeys":["addReducer","fun <A : Action> addReducer(matcher: Matcher<Action, A>, reducer: Reducer<State, Action, Effect<Proposal, SE>>, expectsProposal: Boolean)","com.onegravity.bloc.BlocBuilder.addReducer"]},{"name":"fun <A : Action> addThunk(matcher: Matcher<Action, A>, thunk: Thunk<State, Action, A>)","description":"com.onegravity.bloc.BlocBuilder.addThunk","location":"bloc-core/com.onegravity.bloc/-bloc-builder/add-thunk.html","searchKeys":["addThunk","fun <A : Action> addThunk(matcher: Matcher<Action, A>, thunk: Thunk<State, Action, A>)","com.onegravity.bloc.BlocBuilder.addThunk"]},{"name":"fun <Action : Any> MatcherReducer(matcher: Matcher<Action, Action>?, reducer: Reducer<State, Action, Proposal>, expectsProposal: Boolean)","description":"com.onegravity.bloc.utils.MatcherReducer.MatcherReducer","location":"bloc-core/com.onegravity.bloc.utils/-matcher-reducer/-matcher-reducer.html","searchKeys":["MatcherReducer","fun <Action : Any> MatcherReducer(matcher: Matcher<Action, Action>?, reducer: Reducer<State, Action, Proposal>, expectsProposal: Boolean)","com.onegravity.bloc.utils.MatcherReducer.MatcherReducer"]},{"name":"fun <Action : Any> MatcherThunk(matcher: Matcher<Action, Action>?, thunk: Thunk<State, Action, A>)","description":"com.onegravity.bloc.utils.MatcherThunk.MatcherThunk","location":"bloc-core/com.onegravity.bloc.utils/-matcher-thunk/-matcher-thunk.html","searchKeys":["MatcherThunk","fun <Action : Any> MatcherThunk(matcher: Matcher<Action, Action>?, thunk: Thunk<State, Action, A>)","com.onegravity.bloc.utils.MatcherThunk.MatcherThunk"]},{"name":"fun <I : Any> withSingleField(fn: S.() -> I): AbstractSelector<S, I>","description":"com.onegravity.bloc.select.SelectorBuilder.withSingleField","location":"bloc-core/com.onegravity.bloc.select/-selector-builder/with-single-field.html","searchKeys":["withSingleField","fun <I : Any> withSingleField(fn: S.() -> I): AbstractSelector<S, I>","com.onegravity.bloc.select.SelectorBuilder.withSingleField"]},{"name":"fun <I : Any> withSingleFieldByValue(fn: S.() -> I): AbstractSelector<S, I>","description":"com.onegravity.bloc.select.SelectorBuilder.withSingleFieldByValue","location":"bloc-core/com.onegravity.bloc.select/-selector-builder/with-single-field-by-value.html","searchKeys":["withSingleFieldByValue","fun <I : Any> withSingleFieldByValue(fn: S.() -> I): AbstractSelector<S, I>","com.onegravity.bloc.select.SelectorBuilder.withSingleFieldByValue"]},{"name":"fun <Proposal : Any> build(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>): ReduxBlocState<State, Proposal, Model, ReduxModel>","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.build","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/build.html","searchKeys":["build","fun <Proposal : Any> build(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>): ReduxBlocState<State, Proposal, Model, ReduxModel>","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.build"]},{"name":"fun <Proposal, SideEffect> Effect(proposal: Proposal?, sideEffect: SideEffect)","description":"com.onegravity.bloc.utils.Effect.Effect","location":"bloc-core/com.onegravity.bloc.utils/-effect/-effect.html","searchKeys":["Effect","fun <Proposal, SideEffect> Effect(proposal: Proposal?, sideEffect: SideEffect)","com.onegravity.bloc.utils.Effect.Effect"]},{"name":"fun <Proposal, SideEffect> Effect(proposal: Proposal?, sideEffects: List<SideEffect>)","description":"com.onegravity.bloc.utils.Effect.Effect","location":"bloc-core/com.onegravity.bloc.utils/-effect/-effect.html","searchKeys":["Effect","fun <Proposal, SideEffect> Effect(proposal: Proposal?, sideEffects: List<SideEffect>)","com.onegravity.bloc.utils.Effect.Effect"]},{"name":"fun <S, I> InputField(fn: S.() -> I, equalityCheck: EqualityCheckFn)","description":"com.onegravity.bloc.select.InputField.InputField","location":"bloc-core/com.onegravity.bloc.select/-input-field/-input-field.html","searchKeys":["InputField","fun <S, I> InputField(fn: S.() -> I, equalityCheck: EqualityCheckFn)","com.onegravity.bloc.select.InputField.InputField"]},{"name":"fun <SelectedState : Any> select(selector: (State) -> SelectedState, action: (SelectedState) -> Unit)","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.select","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/select.html","searchKeys":["select","fun <SelectedState : Any> select(selector: (State) -> SelectedState, action: (SelectedState) -> Unit)","com.onegravity.bloc.select.SelectorSubscriberBuilder.select"]},{"name":"fun <State : Any, Proposal : Any, Model : Any, ReduxModel : Any> <ERROR CLASS><ReduxModel>.toBlocState(context: BlocContext, initialState: State, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>): <ERROR CLASS>","description":"com.onegravity.bloc.state.redux.toBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/to-bloc-state.html","searchKeys":["toBlocState","fun <State : Any, Proposal : Any, Model : Any, ReduxModel : Any> <ERROR CLASS><ReduxModel>.toBlocState(context: BlocContext, initialState: State, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>): <ERROR CLASS>","com.onegravity.bloc.state.redux.toBlocState"]},{"name":"fun <State : Any, Proposal : Any, ReduxModel : Any> <ERROR CLASS><ReduxModel>.toBlocState(context: BlocContext, initialState: State, selector: Selector<ReduxModel, State>): <ERROR CLASS>","description":"com.onegravity.bloc.state.redux.toBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/to-bloc-state.html","searchKeys":["toBlocState","fun <State : Any, Proposal : Any, ReduxModel : Any> <ERROR CLASS><ReduxModel>.toBlocState(context: BlocContext, initialState: State, selector: Selector<ReduxModel, State>): <ERROR CLASS>","com.onegravity.bloc.state.redux.toBlocState"]},{"name":"fun <State : Any, Proposal : Any, ReduxModel : Any> reduxBlocState(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>, block: ReduxSimpleBlocStateBuilder<State, ReduxModel>.() -> Unit): BlocState<State, Proposal>","description":"com.onegravity.bloc.state.redux.reduxBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/redux-bloc-state.html","searchKeys":["reduxBlocState","fun <State : Any, Proposal : Any, ReduxModel : Any> reduxBlocState(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>, block: ReduxSimpleBlocStateBuilder<State, ReduxModel>.() -> Unit): BlocState<State, Proposal>","com.onegravity.bloc.state.redux.reduxBlocState"]},{"name":"fun <State : Any, Proposal : Any> <ERROR CLASS><State>.toBlocState(context: BlocContext, initialState: State): <ERROR CLASS>","description":"com.onegravity.bloc.state.redux.toBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/to-bloc-state.html","searchKeys":["toBlocState","fun <State : Any, Proposal : Any> <ERROR CLASS><State>.toBlocState(context: BlocContext, initialState: State): <ERROR CLASS>","com.onegravity.bloc.state.redux.toBlocState"]},{"name":"fun <State : Any, SelectedState : Any> <ERROR CLASS>.selectScoped(store: <ERROR CLASS><State>, selector: (State) -> SelectedState, block: (SelectedState) -> Unit)","description":"com.onegravity.bloc.state.redux.selectScoped","location":"bloc-core/com.onegravity.bloc.state.redux/select-scoped.html","searchKeys":["selectScoped","fun <State : Any, SelectedState : Any> <ERROR CLASS>.selectScoped(store: <ERROR CLASS><State>, selector: (State) -> SelectedState, block: (SelectedState) -> Unit)","com.onegravity.bloc.state.redux.selectScoped"]},{"name":"fun <State : Any, SelectedState : Any> <ERROR CLASS><State>.select(selector: (State) -> SelectedState, onChange: (SelectedState) -> Unit): <ERROR CLASS>","description":"com.onegravity.bloc.select.select","location":"bloc-core/com.onegravity.bloc.select/select.html","searchKeys":["select","fun <State : Any, SelectedState : Any> <ERROR CLASS><State>.select(selector: (State) -> SelectedState, onChange: (SelectedState) -> Unit): <ERROR CLASS>","com.onegravity.bloc.select.select"]},{"name":"fun <State : Any, SelectedState : Any> <ERROR CLASS><State>.selectScoped(disposableScope: <ERROR CLASS>, selector: (State) -> SelectedState, block: (SelectedState) -> Unit)","description":"com.onegravity.bloc.state.redux.selectScoped","location":"bloc-core/com.onegravity.bloc.state.redux/select-scoped.html","searchKeys":["selectScoped","fun <State : Any, SelectedState : Any> <ERROR CLASS><State>.selectScoped(disposableScope: <ERROR CLASS>, selector: (State) -> SelectedState, block: (SelectedState) -> Unit)","com.onegravity.bloc.state.redux.selectScoped"]},{"name":"fun <State : Any> <ERROR CLASS><State>.selectors(subscriberBuilderBlock: SelectorSubscriberBuilder<State>.() -> Unit): <ERROR CLASS>","description":"com.onegravity.bloc.select.selectors","location":"bloc-core/com.onegravity.bloc.select/selectors.html","searchKeys":["selectors","fun <State : Any> <ERROR CLASS><State>.selectors(subscriberBuilderBlock: SelectorSubscriberBuilder<State>.() -> Unit): <ERROR CLASS>","com.onegravity.bloc.select.selectors"]},{"name":"fun <State : Any> SelectorSubscriberBuilder(store: <ERROR CLASS><State>)","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.SelectorSubscriberBuilder","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/-selector-subscriber-builder.html","searchKeys":["SelectorSubscriberBuilder","fun <State : Any> SelectorSubscriberBuilder(store: <ERROR CLASS><State>)","com.onegravity.bloc.select.SelectorSubscriberBuilder.SelectorSubscriberBuilder"]},{"name":"fun <State, A : Action> ThunkContext(getState: <ERROR CLASS><State>, action: A, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.ThunkContext.ThunkContext","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context/-thunk-context.html","searchKeys":["ThunkContext","fun <State, A : Action> ThunkContext(getState: <ERROR CLASS><State>, action: A, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.ThunkContext.ThunkContext"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.toObservable(): BlocObservable<State, SideEffect>","description":"com.onegravity.bloc.toObservable","location":"bloc-core/com.onegravity.bloc/to-observable.html","searchKeys":["toObservable","fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.toObservable(): BlocObservable<State, SideEffect>","com.onegravity.bloc.toObservable"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.toObservable(bloc: Bloc<State, Action, SideEffect, Proposal>): <ERROR CLASS>","description":"com.onegravity.bloc.toObservable","location":"bloc-core/com.onegravity.bloc/to-observable.html","searchKeys":["toObservable","fun <State, Action : Any, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.toObservable(bloc: Bloc<State, Action, SideEffect, Proposal>): <ERROR CLASS>","com.onegravity.bloc.toObservable"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> BlocImpl(blocContext: BlocContext, blocState: BlocState<State, Proposal>, initializer: Initializer<State, Action> = { }, thunks: List<MatcherThunk<State, Action, Action>> = emptyList(), reducers: List<MatcherReducer<State, Action, Effect<Proposal, SideEffect>>>, dispatcher: <ERROR CLASS> = Dispatchers.Default)","description":"com.onegravity.bloc.BlocImpl.BlocImpl","location":"bloc-core/com.onegravity.bloc/-bloc-impl/-bloc-impl.html","searchKeys":["BlocImpl","fun <State, Action : Any, SideEffect, Proposal> BlocImpl(blocContext: BlocContext, blocState: BlocState<State, Proposal>, initializer: Initializer<State, Action> = { }, thunks: List<MatcherThunk<State, Action, Action>> = emptyList(), reducers: List<MatcherReducer<State, Action, Effect<Proposal, SideEffect>>>, dispatcher: <ERROR CLASS> = Dispatchers.Default)","com.onegravity.bloc.BlocImpl.BlocImpl"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(activity: AppCompatActivity, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(activity: AppCompatActivity, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(fragment: Fragment, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(fragment: Fragment, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, Action : Any, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> List<Bloc<State, Action, SideEffect, Proposal>>.toObservable(): BlocObservable<State, SideEffect>","description":"com.onegravity.bloc.toObservable","location":"bloc-core/com.onegravity.bloc/to-observable.html","searchKeys":["toObservable","fun <State, Action : Any, SideEffect, Proposal> List<Bloc<State, Action, SideEffect, Proposal>>.toObservable(): BlocObservable<State, SideEffect>","com.onegravity.bloc.toObservable"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> bloc(context: BlocContext, blocState: BlocState<State, Proposal>, block: BlocBuilder<State, Action, SideEffect, Proposal>.() -> Unit = {}): Bloc<State, Action, SideEffect, Proposal>","description":"com.onegravity.bloc.bloc","location":"bloc-core/com.onegravity.bloc/[common]bloc.html","searchKeys":["bloc","fun <State, Action : Any, SideEffect, Proposal> bloc(context: BlocContext, blocState: BlocState<State, Proposal>, block: BlocBuilder<State, Action, SideEffect, Proposal>.() -> Unit = {}): Bloc<State, Action, SideEffect, Proposal>","com.onegravity.bloc.bloc"]},{"name":"fun <State, Action : Any, SideEffect, Proposal> bloc(context: BlocContext, initialValue: State, block: BlocBuilder<State, Action, SideEffect, Proposal>.() -> Unit = {}): Bloc<State, Action, SideEffect, Proposal>","description":"com.onegravity.bloc.bloc","location":"bloc-core/com.onegravity.bloc/bloc.html","searchKeys":["bloc","fun <State, Action : Any, SideEffect, Proposal> bloc(context: BlocContext, initialValue: State, block: BlocBuilder<State, Action, SideEffect, Proposal>.() -> Unit = {}): Bloc<State, Action, SideEffect, Proposal>","com.onegravity.bloc.bloc"]},{"name":"fun <State, Action : Any> bloc(context: BlocContext, blocState: BlocState<State, State>, block: BlocBuilder<State, Action, Unit, State>.() -> Unit = {}): Bloc<State, Action, Unit, State>","description":"com.onegravity.bloc.bloc","location":"bloc-core/com.onegravity.bloc/bloc.html","searchKeys":["bloc","fun <State, Action : Any> bloc(context: BlocContext, blocState: BlocState<State, State>, block: BlocBuilder<State, Action, Unit, State>.() -> Unit = {}): Bloc<State, Action, Unit, State>","com.onegravity.bloc.bloc"]},{"name":"fun <State, Action : Any> bloc(context: BlocContext, initialValue: State, block: BlocBuilder<State, Action, Unit, State>.() -> Unit = {}): Bloc<State, Action, Unit, State>","description":"com.onegravity.bloc.bloc","location":"bloc-core/com.onegravity.bloc/bloc.html","searchKeys":["bloc","fun <State, Action : Any> bloc(context: BlocContext, initialValue: State, block: BlocBuilder<State, Action, Unit, State>.() -> Unit = {}): Bloc<State, Action, Unit, State>","com.onegravity.bloc.bloc"]},{"name":"fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.onCreate(initializer: Initializer<State, Action>)","description":"com.onegravity.bloc.onCreate","location":"bloc-core/com.onegravity.bloc/on-create.html","searchKeys":["onCreate","fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.onCreate(initializer: Initializer<State, Action>)","com.onegravity.bloc.onCreate"]},{"name":"fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.reduce(reducer: ReducerNoAction<State, Proposal>)","description":"com.onegravity.bloc.reduce","location":"bloc-core/com.onegravity.bloc/reduce.html","searchKeys":["reduce","fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.reduce(reducer: ReducerNoAction<State, Proposal>)","com.onegravity.bloc.reduce"]},{"name":"fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.reduceAnd(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>)","description":"com.onegravity.bloc.reduceAnd","location":"bloc-core/com.onegravity.bloc/reduce-and.html","searchKeys":["reduceAnd","fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.reduceAnd(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>)","com.onegravity.bloc.reduceAnd"]},{"name":"fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.sideEffect(sideEffect: SideEffectNoAction<State, SideEffect>)","description":"com.onegravity.bloc.sideEffect","location":"bloc-core/com.onegravity.bloc/side-effect.html","searchKeys":["sideEffect","fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.sideEffect(sideEffect: SideEffectNoAction<State, SideEffect>)","com.onegravity.bloc.sideEffect"]},{"name":"fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.thunk(thunk: ThunkNoAction<State, Action>)","description":"com.onegravity.bloc.thunk","location":"bloc-core/com.onegravity.bloc/thunk.html","searchKeys":["thunk","fun <State, Action, SideEffect, Proposal> Bloc<State, Action, SideEffect, Proposal>.thunk(thunk: ThunkNoAction<State, Action>)","com.onegravity.bloc.thunk"]},{"name":"fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.onCreate(initializer: Initializer<State, Action>)","description":"com.onegravity.bloc.onCreate","location":"bloc-core/com.onegravity.bloc/on-create.html","searchKeys":["onCreate","fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.onCreate(initializer: Initializer<State, Action>)","com.onegravity.bloc.onCreate"]},{"name":"fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.reduce(reducer: ReducerNoAction<State, Proposal>)","description":"com.onegravity.bloc.reduce","location":"bloc-core/com.onegravity.bloc/reduce.html","searchKeys":["reduce","fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.reduce(reducer: ReducerNoAction<State, Proposal>)","com.onegravity.bloc.reduce"]},{"name":"fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.reduceAnd(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>)","description":"com.onegravity.bloc.reduceAnd","location":"bloc-core/com.onegravity.bloc/reduce-and.html","searchKeys":["reduceAnd","fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.reduceAnd(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>)","com.onegravity.bloc.reduceAnd"]},{"name":"fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.sideEffect(sideEffect: SideEffectNoAction<State, SideEffect>)","description":"com.onegravity.bloc.sideEffect","location":"bloc-core/com.onegravity.bloc/side-effect.html","searchKeys":["sideEffect","fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.sideEffect(sideEffect: SideEffectNoAction<State, SideEffect>)","com.onegravity.bloc.sideEffect"]},{"name":"fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.thunk(thunk: ThunkNoAction<State, Action>)","description":"com.onegravity.bloc.thunk","location":"bloc-core/com.onegravity.bloc/thunk.html","searchKeys":["thunk","fun <State, Action, SideEffect, Proposal> BlocOwner<State, Action, SideEffect, Proposal>.thunk(thunk: ThunkNoAction<State, Action>)","com.onegravity.bloc.thunk"]},{"name":"fun <State, Action> ReducerContext(state: State, action: Action, coroutineScope: <ERROR CLASS>)","description":"com.onegravity.bloc.utils.ReducerContext.ReducerContext","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context/-reducer-context.html","searchKeys":["ReducerContext","fun <State, Action> ReducerContext(state: State, action: Action, coroutineScope: <ERROR CLASS>)","com.onegravity.bloc.utils.ReducerContext.ReducerContext"]},{"name":"fun <State, Proposal : Any, Model : Any, ReduxModel : Any> reduxBlocState(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>, block: ReduxBlocStateBuilder<State, Model, ReduxModel>.() -> Unit): BlocState<State, Proposal>","description":"com.onegravity.bloc.state.redux.reduxBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/redux-bloc-state.html","searchKeys":["reduxBlocState","fun <State, Proposal : Any, Model : Any, ReduxModel : Any> reduxBlocState(disposableScope: <ERROR CLASS>, store: <ERROR CLASS><ReduxModel>, block: ReduxBlocStateBuilder<State, Model, ReduxModel>.() -> Unit): BlocState<State, Proposal>","com.onegravity.bloc.state.redux.reduxBlocState"]},{"name":"fun <State, Proposal> blocState(block: BlocStateBuilder<State, Proposal>.() -> Unit): BlocState<State, Proposal>","description":"com.onegravity.bloc.state.blocState","location":"bloc-core/com.onegravity.bloc.state/bloc-state.html","searchKeys":["blocState","fun <State, Proposal> blocState(block: BlocStateBuilder<State, Proposal>.() -> Unit): BlocState<State, Proposal>","com.onegravity.bloc.state.blocState"]},{"name":"fun <State, ReduxModel : Any> ReduxBlocState(disposableScope: <ERROR CLASS>, initialState: State, store: <ERROR CLASS><ReduxModel>, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>)","description":"com.onegravity.bloc.state.redux.ReduxBlocState.ReduxBlocState","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state/-redux-bloc-state.html","searchKeys":["ReduxBlocState","fun <State, ReduxModel : Any> ReduxBlocState(disposableScope: <ERROR CLASS>, initialState: State, store: <ERROR CLASS><ReduxModel>, selector: Selector<ReduxModel, Model>, mapper: Mapper<Model, State>)","com.onegravity.bloc.state.redux.ReduxBlocState.ReduxBlocState"]},{"name":"fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(activity: AppCompatActivity, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(activity: AppCompatActivity, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(fragment: Fragment, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(fragment: Fragment, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","description":"com.onegravity.bloc.subscribe","location":"bloc-core/com.onegravity.bloc/subscribe.html","searchKeys":["subscribe","fun <State, SideEffect> BlocObservableOwner<State, SideEffect>.subscribe(lifecycle: <ERROR CLASS>, state: suspend (State) -> Unit? = null, sideEffect: suspend (SideEffect) -> Unit? = null)","com.onegravity.bloc.subscribe"]},{"name":"fun <State> BlocStateImpl(initialState: State, acceptor: Acceptor<Proposal, State>)","description":"com.onegravity.bloc.state.BlocStateImpl.BlocStateImpl","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-impl/-bloc-state-impl.html","searchKeys":["BlocStateImpl","fun <State> BlocStateImpl(initialState: State, acceptor: Acceptor<Proposal, State>)","com.onegravity.bloc.state.BlocStateImpl.BlocStateImpl"]},{"name":"fun <State> InitializerContext(state: State, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.InitializerContext.InitializerContext","location":"bloc-core/com.onegravity.bloc.utils/-initializer-context/-initializer-context.html","searchKeys":["InitializerContext","fun <State> InitializerContext(state: State, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.InitializerContext.InitializerContext"]},{"name":"fun <State> ReducerContextNoAction(state: State, scope: <ERROR CLASS>)","description":"com.onegravity.bloc.utils.ReducerContextNoAction.ReducerContextNoAction","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context-no-action/-reducer-context-no-action.html","searchKeys":["ReducerContextNoAction","fun <State> ReducerContextNoAction(state: State, scope: <ERROR CLASS>)","com.onegravity.bloc.utils.ReducerContextNoAction.ReducerContextNoAction"]},{"name":"fun <State> StateStream<State>.toLiveData(scope: CoroutineScope): LiveData<State>","description":"com.onegravity.bloc.toLiveData","location":"bloc-core/com.onegravity.bloc/to-live-data.html","searchKeys":["toLiveData","fun <State> StateStream<State>.toLiveData(scope: CoroutineScope): LiveData<State>","com.onegravity.bloc.toLiveData"]},{"name":"fun <State> ThunkContextNoAction(getState: <ERROR CLASS><State>, dispatch: Dispatcher<Action>)","description":"com.onegravity.bloc.utils.ThunkContextNoAction.ThunkContextNoAction","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context-no-action/-thunk-context-no-action.html","searchKeys":["ThunkContextNoAction","fun <State> ThunkContextNoAction(getState: <ERROR CLASS><State>, dispatch: Dispatcher<Action>)","com.onegravity.bloc.utils.ThunkContextNoAction.ThunkContextNoAction"]},{"name":"fun <State> ViewModel.toLiveData(stream: StateStream<State>): LiveData<State>","description":"com.onegravity.bloc.toLiveData","location":"bloc-core/com.onegravity.bloc/to-live-data.html","searchKeys":["toLiveData","fun <State> ViewModel.toLiveData(stream: StateStream<State>): LiveData<State>","com.onegravity.bloc.toLiveData"]},{"name":"fun <State> blocState(initialState: State): BlocState<State, State>","description":"com.onegravity.bloc.state.blocState","location":"bloc-core/com.onegravity.bloc.state/bloc-state.html","searchKeys":["blocState","fun <State> blocState(initialState: State): BlocState<State, State>","com.onegravity.bloc.state.blocState"]},{"name":"fun <T : SavedStateRegistryOwner, OnBackPressedDispatcherOwner, ViewModelStoreOwner, LifecycleOwner> T.defaultBlocContext(): DefaultBlocContext","description":"com.onegravity.bloc.defaultBlocContext","location":"bloc-core/com.onegravity.bloc/default-bloc-context.html","searchKeys":["defaultBlocContext","fun <T : SavedStateRegistryOwner, OnBackPressedDispatcherOwner, ViewModelStoreOwner, LifecycleOwner> T.defaultBlocContext(): DefaultBlocContext","com.onegravity.bloc.defaultBlocContext"]},{"name":"fun <T : ViewBinding> FragmentViewBindingDelegate(fragment: Fragment, viewBindingFactory: (View) -> T)","description":"com.onegravity.bloc.utils.FragmentViewBindingDelegate.FragmentViewBindingDelegate","location":"bloc-core/com.onegravity.bloc.utils/-fragment-view-binding-delegate/-fragment-view-binding-delegate.html","searchKeys":["FragmentViewBindingDelegate","fun <T : ViewBinding> FragmentViewBindingDelegate(fragment: Fragment, viewBindingFactory: (View) -> T)","com.onegravity.bloc.utils.FragmentViewBindingDelegate.FragmentViewBindingDelegate"]},{"name":"fun <T : ViewDataBinding> AppCompatActivity.bind(layoutId: Int, bind2ViewModel: (T) -> Unit)","description":"com.onegravity.bloc.bind","location":"bloc-core/com.onegravity.bloc/bind.html","searchKeys":["bind","fun <T : ViewDataBinding> AppCompatActivity.bind(layoutId: Int, bind2ViewModel: (T) -> Unit)","com.onegravity.bloc.bind"]},{"name":"fun <T> computationMemoizer(computeFn: (Array<out Any>) -> T): Memoizer<T>","description":"com.onegravity.bloc.select.computationMemoizer","location":"bloc-core/com.onegravity.bloc.select/computation-memoizer.html","searchKeys":["computationMemoizer","fun <T> computationMemoizer(computeFn: (Array<out Any>) -> T): Memoizer<T>","com.onegravity.bloc.select.computationMemoizer"]},{"name":"fun <T> singleInputMemoizer(func: (Array<out Any>) -> T): Memoizer<T>","description":"com.onegravity.bloc.select.singleInputMemoizer","location":"bloc-core/com.onegravity.bloc.select/single-input-memoizer.html","searchKeys":["singleInputMemoizer","fun <T> singleInputMemoizer(func: (Array<out Any>) -> T): Memoizer<T>","com.onegravity.bloc.select.singleInputMemoizer"]},{"name":"fun <out ChildClazz : SuperClazz> Matcher(clazz: KClass<ChildClazz>)","description":"com.onegravity.bloc.utils.Matcher.Matcher","location":"bloc-core/com.onegravity.bloc.utils/-matcher/-matcher.html","searchKeys":["Matcher","fun <out ChildClazz : SuperClazz> Matcher(clazz: KClass<ChildClazz>)","com.onegravity.bloc.utils.Matcher.Matcher"]},{"name":"fun AbstractSelector()","description":"com.onegravity.bloc.select.AbstractSelector.AbstractSelector","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/-abstract-selector.html","searchKeys":["AbstractSelector","fun AbstractSelector()","com.onegravity.bloc.select.AbstractSelector.AbstractSelector"]},{"name":"fun ActivityBlocContext(savedStateRegistry: SavedStateRegistry? = null, viewModelStore: ViewModelStore? = null, onBackPressedDispatcher: OnBackPressedDispatcher? = null)","description":"com.onegravity.bloc.ActivityBlocContext.ActivityBlocContext","location":"bloc-core/com.onegravity.bloc/-activity-bloc-context/-activity-bloc-context.html","searchKeys":["ActivityBlocContext","fun ActivityBlocContext(savedStateRegistry: SavedStateRegistry? = null, viewModelStore: ViewModelStore? = null, onBackPressedDispatcher: OnBackPressedDispatcher? = null)","com.onegravity.bloc.ActivityBlocContext.ActivityBlocContext"]},{"name":"fun AppCompatActivity.activityBlocContext(): ActivityBlocContext","description":"com.onegravity.bloc.activityBlocContext","location":"bloc-core/com.onegravity.bloc/activity-bloc-context.html","searchKeys":["activityBlocContext","fun AppCompatActivity.activityBlocContext(): ActivityBlocContext","com.onegravity.bloc.activityBlocContext"]},{"name":"fun BaseViewModel(context: ActivityBlocContext)","description":"com.onegravity.bloc.BaseViewModel.BaseViewModel","location":"bloc-core/com.onegravity.bloc/-base-view-model/-base-view-model.html","searchKeys":["BaseViewModel","fun BaseViewModel(context: ActivityBlocContext)","com.onegravity.bloc.BaseViewModel.BaseViewModel"]},{"name":"fun BlocBuilder()","description":"com.onegravity.bloc.BlocBuilder.BlocBuilder","location":"bloc-core/com.onegravity.bloc/-bloc-builder/-bloc-builder.html","searchKeys":["BlocBuilder","fun BlocBuilder()","com.onegravity.bloc.BlocBuilder.BlocBuilder"]},{"name":"fun BlocContext.disposableScope(): <ERROR CLASS>","description":"com.onegravity.bloc.state.redux.disposableScope","location":"bloc-core/com.onegravity.bloc.state.redux/disposable-scope.html","searchKeys":["disposableScope","fun BlocContext.disposableScope(): <ERROR CLASS>","com.onegravity.bloc.state.redux.disposableScope"]},{"name":"fun BlocDSL()","description":"com.onegravity.bloc.utils.BlocDSL.BlocDSL","location":"bloc-core/com.onegravity.bloc.utils/-bloc-d-s-l/-bloc-d-s-l.html","searchKeys":["BlocDSL","fun BlocDSL()","com.onegravity.bloc.utils.BlocDSL.BlocDSL"]},{"name":"fun BlocInternal()","description":"com.onegravity.bloc.utils.BlocInternal.BlocInternal","location":"bloc-core/com.onegravity.bloc.utils/-bloc-internal/-bloc-internal.html","searchKeys":["BlocInternal","fun BlocInternal()","com.onegravity.bloc.utils.BlocInternal.BlocInternal"]},{"name":"fun BlocProtected()","description":"com.onegravity.bloc.utils.BlocProtected.BlocProtected","location":"bloc-core/com.onegravity.bloc.utils/-bloc-protected/-bloc-protected.html","searchKeys":["BlocProtected","fun BlocProtected()","com.onegravity.bloc.utils.BlocProtected.BlocProtected"]},{"name":"fun BlocStateBuilderImpl()","description":"com.onegravity.bloc.state.BlocStateBuilderImpl.BlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder-impl/-bloc-state-builder-impl.html","searchKeys":["BlocStateBuilderImpl","fun BlocStateBuilderImpl()","com.onegravity.bloc.state.BlocStateBuilderImpl.BlocStateBuilderImpl"]},{"name":"fun DefaultBlocContext(lifecycle: <ERROR CLASS>, stateKeeper: <ERROR CLASS>? = null, instanceKeeper: <ERROR CLASS>? = null, backPressedHandler: <ERROR CLASS>? = null)","description":"com.onegravity.bloc.context.DefaultBlocContext.DefaultBlocContext","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/-default-bloc-context.html","searchKeys":["DefaultBlocContext","fun DefaultBlocContext(lifecycle: <ERROR CLASS>, stateKeeper: <ERROR CLASS>? = null, instanceKeeper: <ERROR CLASS>? = null, backPressedHandler: <ERROR CLASS>? = null)","com.onegravity.bloc.context.DefaultBlocContext.DefaultBlocContext"]},{"name":"fun Fragment.activityBlocContext(): ActivityBlocContext","description":"com.onegravity.bloc.activityBlocContext","location":"bloc-core/com.onegravity.bloc/activity-bloc-context.html","searchKeys":["activityBlocContext","fun Fragment.activityBlocContext(): ActivityBlocContext","com.onegravity.bloc.activityBlocContext"]},{"name":"fun Proposal.noSideEffect(): Effect<Proposal, SE>","description":"com.onegravity.bloc.BlocBuilder.noSideEffect","location":"bloc-core/com.onegravity.bloc/-bloc-builder/no-side-effect.html","searchKeys":["noSideEffect","fun Proposal.noSideEffect(): Effect<Proposal, SE>","com.onegravity.bloc.BlocBuilder.noSideEffect"]},{"name":"fun ReduxBlocStateBuilderImpl()","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.ReduxBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/-redux-bloc-state-builder-impl.html","searchKeys":["ReduxBlocStateBuilderImpl","fun ReduxBlocStateBuilderImpl()","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.ReduxBlocStateBuilderImpl"]},{"name":"fun ReduxSimpleBlocStateBuilderImpl()","description":"com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilderImpl.ReduxSimpleBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-simple-bloc-state-builder-impl/-redux-simple-bloc-state-builder-impl.html","searchKeys":["ReduxSimpleBlocStateBuilderImpl","fun ReduxSimpleBlocStateBuilderImpl()","com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilderImpl.ReduxSimpleBlocStateBuilderImpl"]},{"name":"fun SelectorBuilder()","description":"com.onegravity.bloc.select.SelectorBuilder.SelectorBuilder","location":"bloc-core/com.onegravity.bloc.select/-selector-builder/-selector-builder.html","searchKeys":["SelectorBuilder","fun SelectorBuilder()","com.onegravity.bloc.select.SelectorBuilder.SelectorBuilder"]},{"name":"fun SimpleBlocStateBuilderImpl()","description":"com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.SimpleBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder-impl/-simple-bloc-state-builder-impl.html","searchKeys":["SimpleBlocStateBuilderImpl","fun SimpleBlocStateBuilderImpl()","com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.SimpleBlocStateBuilderImpl"]},{"name":"fun ViewModel.defaultBlocContext(activityBlocContext: ActivityBlocContext, lifecycleRegistry: LifecycleRegistry): DefaultBlocContext","description":"com.onegravity.bloc.defaultBlocContext","location":"bloc-core/com.onegravity.bloc/default-bloc-context.html","searchKeys":["defaultBlocContext","fun ViewModel.defaultBlocContext(activityBlocContext: ActivityBlocContext, lifecycleRegistry: LifecycleRegistry): DefaultBlocContext","com.onegravity.bloc.defaultBlocContext"]},{"name":"fun build(): <ERROR CLASS>","description":"com.onegravity.bloc.state.BlocStateBuilderImpl.build","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder-impl/build.html","searchKeys":["build","fun build(): <ERROR CLASS>","com.onegravity.bloc.state.BlocStateBuilderImpl.build"]},{"name":"fun build(context: BlocContext, blocState: BlocState<State, Proposal>): <ERROR CLASS>","description":"com.onegravity.bloc.BlocBuilder.build","location":"bloc-core/com.onegravity.bloc/-bloc-builder/build.html","searchKeys":["build","fun build(context: BlocContext, blocState: BlocState<State, Proposal>): <ERROR CLASS>","com.onegravity.bloc.BlocBuilder.build"]},{"name":"fun clazzName(): String?","description":"com.onegravity.bloc.utils.Matcher.clazzName","location":"bloc-core/com.onegravity.bloc.utils/-matcher/clazz-name.html","searchKeys":["clazzName","fun clazzName(): String?","com.onegravity.bloc.utils.Matcher.clazzName"]},{"name":"fun logger(): <ERROR CLASS>","description":"com.onegravity.bloc.utils.logger","location":"bloc-core/com.onegravity.bloc.utils/logger.html","searchKeys":["logger","fun logger(): <ERROR CLASS>","com.onegravity.bloc.utils.logger"]},{"name":"fun matches(value: SuperClazz): <ERROR CLASS>","description":"com.onegravity.bloc.utils.Matcher.matches","location":"bloc-core/com.onegravity.bloc.utils/-matcher/matches.html","searchKeys":["matches","fun matches(value: SuperClazz): <ERROR CLASS>","com.onegravity.bloc.utils.Matcher.matches"]},{"name":"fun onCreate(initializer: Initializer<State, Action>)","description":"com.onegravity.bloc.BlocBuilder.onCreate","location":"bloc-core/com.onegravity.bloc/-bloc-builder/on-create.html","searchKeys":["onCreate","fun onCreate(initializer: Initializer<State, Action>)","com.onegravity.bloc.BlocBuilder.onCreate"]},{"name":"fun reduce(reducer: Reducer<State, Action, Proposal>)","description":"com.onegravity.bloc.BlocBuilder.reduce","location":"bloc-core/com.onegravity.bloc/-bloc-builder/reduce.html","searchKeys":["reduce","fun reduce(reducer: Reducer<State, Action, Proposal>)","com.onegravity.bloc.BlocBuilder.reduce"]},{"name":"fun reduceAnd(reducer: Reducer<State, Action, Effect<Proposal, SE>>)","description":"com.onegravity.bloc.BlocBuilder.reduceAnd","location":"bloc-core/com.onegravity.bloc/-bloc-builder/reduce-and.html","searchKeys":["reduceAnd","fun reduceAnd(reducer: Reducer<State, Action, Effect<Proposal, SE>>)","com.onegravity.bloc.BlocBuilder.reduceAnd"]},{"name":"fun sideEffect(sideEffect: SideEffect<State, Action, SE>)","description":"com.onegravity.bloc.BlocBuilder.sideEffect","location":"bloc-core/com.onegravity.bloc/-bloc-builder/side-effect.html","searchKeys":["sideEffect","fun sideEffect(sideEffect: SideEffect<State, Action, SE>)","com.onegravity.bloc.BlocBuilder.sideEffect"]},{"name":"fun thunk(thunk: Thunk<State, Action, Action>)","description":"com.onegravity.bloc.BlocBuilder.thunk","location":"bloc-core/com.onegravity.bloc/-bloc-builder/thunk.html","searchKeys":["thunk","fun thunk(thunk: Thunk<State, Action, Action>)","com.onegravity.bloc.BlocBuilder.thunk"]},{"name":"fun where(predicate: ChildClazz.() -> Boolean): Matcher<SuperClazz, ChildClazz>","description":"com.onegravity.bloc.utils.Matcher.where","location":"bloc-core/com.onegravity.bloc.utils/-matcher/where.html","searchKeys":["where","fun where(predicate: ChildClazz.() -> Boolean): Matcher<SuperClazz, ChildClazz>","com.onegravity.bloc.utils.Matcher.where"]},{"name":"fun withAnyChange(f: () -> Unit)","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.withAnyChange","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/with-any-change.html","searchKeys":["withAnyChange","fun withAnyChange(f: () -> Unit)","com.onegravity.bloc.select.SelectorSubscriberBuilder.withAnyChange"]},{"name":"infix fun Proposal.and(sideEffect: SE): Effect<Proposal, SE>","description":"com.onegravity.bloc.BlocBuilder.and","location":"bloc-core/com.onegravity.bloc/-bloc-builder/and.html","searchKeys":["and","infix fun Proposal.and(sideEffect: SE): Effect<Proposal, SE>","com.onegravity.bloc.BlocBuilder.and"]},{"name":"infix fun and(sideEffect: SideEffect): Effect<Proposal, SideEffect>","description":"com.onegravity.bloc.utils.Effect.and","location":"bloc-core/com.onegravity.bloc.utils/-effect/and.html","searchKeys":["and","infix fun and(sideEffect: SideEffect): Effect<Proposal, SideEffect>","com.onegravity.bloc.utils.Effect.and"]},{"name":"inline fun <A : Action> reduce(noinline reducer: Reducer<State, A, Proposal>)","description":"com.onegravity.bloc.BlocBuilder.reduce","location":"bloc-core/com.onegravity.bloc/-bloc-builder/reduce.html","searchKeys":["reduce","inline fun <A : Action> reduce(noinline reducer: Reducer<State, A, Proposal>)","com.onegravity.bloc.BlocBuilder.reduce"]},{"name":"inline fun <A : Action> sideEffect(noinline sideEffect: SideEffect<State, A, SE>)","description":"com.onegravity.bloc.BlocBuilder.sideEffect","location":"bloc-core/com.onegravity.bloc/-bloc-builder/side-effect.html","searchKeys":["sideEffect","inline fun <A : Action> sideEffect(noinline sideEffect: SideEffect<State, A, SE>)","com.onegravity.bloc.BlocBuilder.sideEffect"]},{"name":"inline fun <A : Action> thunk(noinline thunk: Thunk<State, Action, A>)","description":"com.onegravity.bloc.BlocBuilder.thunk","location":"bloc-core/com.onegravity.bloc/-bloc-builder/thunk.html","searchKeys":["thunk","inline fun <A : Action> thunk(noinline thunk: Thunk<State, Action, A>)","com.onegravity.bloc.BlocBuilder.thunk"]},{"name":"inline fun <SuperClazz : Any, ChildClazz : SuperClazz> any(): Matcher<SuperClazz, ChildClazz>","description":"com.onegravity.bloc.utils.Matcher.Companion.any","location":"bloc-core/com.onegravity.bloc.utils/-matcher/-companion/any.html","searchKeys":["any","inline fun <SuperClazz : Any, ChildClazz : SuperClazz> any(): Matcher<SuperClazz, ChildClazz>","com.onegravity.bloc.utils.Matcher.Companion.any"]},{"name":"inline fun <SuperClazz : Any, ChildClazz : SuperClazz> eq(value: ChildClazz): Matcher<SuperClazz, ChildClazz>","description":"com.onegravity.bloc.utils.Matcher.Companion.eq","location":"bloc-core/com.onegravity.bloc.utils/-matcher/-companion/eq.html","searchKeys":["eq","inline fun <SuperClazz : Any, ChildClazz : SuperClazz> eq(value: ChildClazz): Matcher<SuperClazz, ChildClazz>","com.onegravity.bloc.utils.Matcher.Companion.eq"]},{"name":"inline fun <T : ViewBinding> Fragment.viewBinding(): FragmentViewBindingDelegate<T>","description":"com.onegravity.bloc.utils.viewBinding","location":"bloc-core/com.onegravity.bloc.utils/view-binding.html","searchKeys":["viewBinding","inline fun <T : ViewBinding> Fragment.viewBinding(): FragmentViewBindingDelegate<T>","com.onegravity.bloc.utils.viewBinding"]},{"name":"inline fun <VM : ViewModel> AppCompatActivity.factory(crossinline f: (context: ActivityBlocContext) -> VM): ViewModelProvider.Factory","description":"com.onegravity.bloc.factory","location":"bloc-core/com.onegravity.bloc/factory.html","searchKeys":["factory","inline fun <VM : ViewModel> AppCompatActivity.factory(crossinline f: (context: ActivityBlocContext) -> VM): ViewModelProvider.Factory","com.onegravity.bloc.factory"]},{"name":"inline fun <VM : ViewModel> Fragment.factory(crossinline f: (context: ActivityBlocContext) -> VM): ViewModelProvider.Factory","description":"com.onegravity.bloc.factory","location":"bloc-core/com.onegravity.bloc/factory.html","searchKeys":["factory","inline fun <VM : ViewModel> Fragment.factory(crossinline f: (context: ActivityBlocContext) -> VM): ViewModelProvider.Factory","com.onegravity.bloc.factory"]},{"name":"interface Bloc<out State, in Action, SideEffect, Proposal> : BlocFacade<State, Action, SideEffect> , BlocState<State, Action> ","description":"com.onegravity.bloc.Bloc","location":"bloc-core/com.onegravity.bloc/-bloc/index.html","searchKeys":["Bloc","interface Bloc<out State, in Action, SideEffect, Proposal> : BlocFacade<State, Action, SideEffect> , BlocState<State, Action> ","com.onegravity.bloc.Bloc"]},{"name":"interface BlocContext","description":"com.onegravity.bloc.context.BlocContext","location":"bloc-core/com.onegravity.bloc.context/-bloc-context/index.html","searchKeys":["BlocContext","interface BlocContext","com.onegravity.bloc.context.BlocContext"]},{"name":"interface BlocFacade<out State, in Action, out SideEffect> : StateStream<State> , Sink<Action> ","description":"com.onegravity.bloc.BlocFacade","location":"bloc-core/com.onegravity.bloc/-bloc-facade/index.html","searchKeys":["BlocFacade","interface BlocFacade<out State, in Action, out SideEffect> : StateStream<State> , Sink<Action> ","com.onegravity.bloc.BlocFacade"]},{"name":"interface BlocObservable<out State, out SideEffect>","description":"com.onegravity.bloc.utils.BlocObservable","location":"bloc-core/com.onegravity.bloc.utils/-bloc-observable/index.html","searchKeys":["BlocObservable","interface BlocObservable<out State, out SideEffect>","com.onegravity.bloc.utils.BlocObservable"]},{"name":"interface BlocObservableOwner<out State, out SideEffect>","description":"com.onegravity.bloc.utils.BlocObservableOwner","location":"bloc-core/com.onegravity.bloc.utils/-bloc-observable-owner/index.html","searchKeys":["BlocObservableOwner","interface BlocObservableOwner<out State, out SideEffect>","com.onegravity.bloc.utils.BlocObservableOwner"]},{"name":"interface BlocOwner<out State, in Action, SideEffect, Proposal>","description":"com.onegravity.bloc.utils.BlocOwner","location":"bloc-core/com.onegravity.bloc.utils/-bloc-owner/index.html","searchKeys":["BlocOwner","interface BlocOwner<out State, in Action, SideEffect, Proposal>","com.onegravity.bloc.utils.BlocOwner"]},{"name":"interface BlocState<out State, in Proposal> : StateStream<State> , Sink<Proposal> ","description":"com.onegravity.bloc.state.BlocState","location":"bloc-core/com.onegravity.bloc.state/-bloc-state/index.html","searchKeys":["BlocState","interface BlocState<out State, in Proposal> : StateStream<State> , Sink<Proposal> ","com.onegravity.bloc.state.BlocState"]},{"name":"interface BlocStateBuilder<State, Proposal>","description":"com.onegravity.bloc.state.BlocStateBuilder","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder/index.html","searchKeys":["BlocStateBuilder","interface BlocStateBuilder<State, Proposal>","com.onegravity.bloc.state.BlocStateBuilder"]},{"name":"interface Logger","description":"com.onegravity.bloc.utils.Logger","location":"bloc-core/com.onegravity.bloc.utils/-logger/index.html","searchKeys":["Logger","interface Logger","com.onegravity.bloc.utils.Logger"]},{"name":"interface Memoizer<T>","description":"com.onegravity.bloc.select.Memoizer","location":"bloc-core/com.onegravity.bloc.select/-memoizer/index.html","searchKeys":["Memoizer","interface Memoizer<T>","com.onegravity.bloc.select.Memoizer"]},{"name":"interface ReduxBlocStateBuilder<State, Model, ReduxModel>","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilder","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder/index.html","searchKeys":["ReduxBlocStateBuilder","interface ReduxBlocStateBuilder<State, Model, ReduxModel>","com.onegravity.bloc.state.redux.ReduxBlocStateBuilder"]},{"name":"interface ReduxSimpleBlocStateBuilder<State, ReduxModel>","description":"com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-simple-bloc-state-builder/index.html","searchKeys":["ReduxSimpleBlocStateBuilder","interface ReduxSimpleBlocStateBuilder<State, ReduxModel>","com.onegravity.bloc.state.redux.ReduxSimpleBlocStateBuilder"]},{"name":"interface Selector<S, O> : SelectorInput<S, O> ","description":"com.onegravity.bloc.select.Selector","location":"bloc-core/com.onegravity.bloc.select/-selector/index.html","searchKeys":["Selector","interface Selector<S, O> : SelectorInput<S, O> ","com.onegravity.bloc.select.Selector"]},{"name":"interface SelectorInput<S, I>","description":"com.onegravity.bloc.select.SelectorInput","location":"bloc-core/com.onegravity.bloc.select/-selector-input/index.html","searchKeys":["SelectorInput","interface SelectorInput<S, I>","com.onegravity.bloc.select.SelectorInput"]},{"name":"interface SimpleBlocStateBuilder<State>","description":"com.onegravity.bloc.state.SimpleBlocStateBuilder","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder/index.html","searchKeys":["SimpleBlocStateBuilder","interface SimpleBlocStateBuilder<State>","com.onegravity.bloc.state.SimpleBlocStateBuilder"]},{"name":"interface Sink<in Value>","description":"com.onegravity.bloc.utils.Sink","location":"bloc-core/com.onegravity.bloc.utils/-sink/index.html","searchKeys":["Sink","interface Sink<in Value>","com.onegravity.bloc.utils.Sink"]},{"name":"interface StateStream<out Value>","description":"com.onegravity.bloc.utils.StateStream","location":"bloc-core/com.onegravity.bloc.utils/-state-stream/index.html","searchKeys":["StateStream","interface StateStream<out Value>","com.onegravity.bloc.utils.StateStream"]},{"name":"object Companion","description":"com.onegravity.bloc.utils.Matcher.Companion","location":"bloc-core/com.onegravity.bloc.utils/-matcher/-companion/index.html","searchKeys":["Companion","object Companion","com.onegravity.bloc.utils.Matcher.Companion"]},{"name":"object LoggerImpl : Logger","description":"com.onegravity.bloc.utils.LoggerImpl","location":"bloc-core/com.onegravity.bloc.utils/-logger-impl/index.html","searchKeys":["LoggerImpl","object LoggerImpl : Logger","com.onegravity.bloc.utils.LoggerImpl"]},{"name":"open class BaseViewModel(context: ActivityBlocContext) : ViewModel, LifecycleOwner","description":"com.onegravity.bloc.BaseViewModel","location":"bloc-core/com.onegravity.bloc/-base-view-model/index.html","searchKeys":["BaseViewModel","open class BaseViewModel(context: ActivityBlocContext) : ViewModel, LifecycleOwner","com.onegravity.bloc.BaseViewModel"]},{"name":"open class BlocStateImpl<State, Proposal>(initialState: State, acceptor: Acceptor<Proposal, State>) : BlocState<State, Proposal> ","description":"com.onegravity.bloc.state.BlocStateImpl","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-impl/index.html","searchKeys":["BlocStateImpl","open class BlocStateImpl<State, Proposal>(initialState: State, acceptor: Acceptor<Proposal, State>) : BlocState<State, Proposal> ","com.onegravity.bloc.state.BlocStateImpl"]},{"name":"open class ReduxBlocStateBuilderImpl<State, Model : Any, ReduxModel : Any> : ReduxBlocStateBuilder<State, Model, ReduxModel> ","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/index.html","searchKeys":["ReduxBlocStateBuilderImpl","open class ReduxBlocStateBuilderImpl<State, Model : Any, ReduxModel : Any> : ReduxBlocStateBuilder<State, Model, ReduxModel> ","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl"]},{"name":"open fun Proposal.noSideEffect(): Effect<Proposal, SideEffect>","description":"com.onegravity.bloc.utils.BlocOwner.noSideEffect","location":"bloc-core/com.onegravity.bloc.utils/-bloc-owner/no-side-effect.html","searchKeys":["noSideEffect","open fun Proposal.noSideEffect(): Effect<Proposal, SideEffect>","com.onegravity.bloc.utils.BlocOwner.noSideEffect"]},{"name":"open fun getIfChangedIn(state: S): O?","description":"com.onegravity.bloc.select.Selector.getIfChangedIn","location":"bloc-core/com.onegravity.bloc.select/-selector/get-if-changed-in.html","searchKeys":["getIfChangedIn","open fun getIfChangedIn(state: S): O?","com.onegravity.bloc.select.Selector.getIfChangedIn"]},{"name":"open fun onChangeIn(state: S, blockFn: (O) -> Unit)","description":"com.onegravity.bloc.select.Selector.onChangeIn","location":"bloc-core/com.onegravity.bloc.select/-selector/on-change-in.html","searchKeys":["onChangeIn","open fun onChangeIn(state: S, blockFn: (O) -> Unit)","com.onegravity.bloc.select.Selector.onChangeIn"]},{"name":"open infix fun Proposal.and(sideEffect: SideEffect): Effect<Proposal, SideEffect>","description":"com.onegravity.bloc.utils.BlocOwner.and","location":"bloc-core/com.onegravity.bloc.utils/-bloc-owner/and.html","searchKeys":["and","open infix fun Proposal.and(sideEffect: SideEffect): Effect<Proposal, SideEffect>","com.onegravity.bloc.utils.BlocOwner.and"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"com.onegravity.bloc.utils.Matcher.equals","location":"bloc-core/com.onegravity.bloc.utils/-matcher/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","com.onegravity.bloc.utils.Matcher.equals"]},{"name":"open operator override fun getValue(thisRef: Fragment, property: KProperty<*>): T","description":"com.onegravity.bloc.utils.FragmentViewBindingDelegate.getValue","location":"bloc-core/com.onegravity.bloc.utils/-fragment-view-binding-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Fragment, property: KProperty<*>): T","com.onegravity.bloc.utils.FragmentViewBindingDelegate.getValue"]},{"name":"open operator override fun invoke(state: S): I","description":"com.onegravity.bloc.select.InputField.invoke","location":"bloc-core/com.onegravity.bloc.select/-input-field/invoke.html","searchKeys":["invoke","open operator override fun invoke(state: S): I","com.onegravity.bloc.select.InputField.invoke"]},{"name":"open override fun accept(acceptor: Acceptor<Proposal, State>)","description":"com.onegravity.bloc.state.BlocStateBuilderImpl.accept","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder-impl/accept.html","searchKeys":["accept","open override fun accept(acceptor: Acceptor<Proposal, State>)","com.onegravity.bloc.state.BlocStateBuilderImpl.accept"]},{"name":"open override fun build(): BlocStateImpl<State, State>","description":"com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.build","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder-impl/build.html","searchKeys":["build","open override fun build(): BlocStateImpl<State, State>","com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.build"]},{"name":"open override fun d(msg: String)","description":"com.onegravity.bloc.utils.LoggerImpl.d","location":"bloc-core/com.onegravity.bloc.utils/-logger-impl/d.html","searchKeys":["d","open override fun d(msg: String)","com.onegravity.bloc.utils.LoggerImpl.d"]},{"name":"open override fun e(msg: String, t: Throwable?)","description":"com.onegravity.bloc.utils.LoggerImpl.e","location":"bloc-core/com.onegravity.bloc.utils/-logger-impl/e.html","searchKeys":["e","open override fun e(msg: String, t: Throwable?)","com.onegravity.bloc.utils.LoggerImpl.e"]},{"name":"open override fun getLifecycle(): <ERROR CLASS>","description":"com.onegravity.bloc.BaseViewModel.getLifecycle","location":"bloc-core/com.onegravity.bloc/-base-view-model/get-lifecycle.html","searchKeys":["getLifecycle","open override fun getLifecycle(): <ERROR CLASS>","com.onegravity.bloc.BaseViewModel.getLifecycle"]},{"name":"open override fun hashCode(): Int","description":"com.onegravity.bloc.utils.Matcher.hashCode","location":"bloc-core/com.onegravity.bloc.utils/-matcher/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","com.onegravity.bloc.utils.Matcher.hashCode"]},{"name":"open override fun i(msg: String)","description":"com.onegravity.bloc.utils.LoggerImpl.i","location":"bloc-core/com.onegravity.bloc.utils/-logger-impl/i.html","searchKeys":["i","open override fun i(msg: String)","com.onegravity.bloc.utils.LoggerImpl.i"]},{"name":"open override fun isChanged(): Boolean","description":"com.onegravity.bloc.select.AbstractSelector.isChanged","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/is-changed.html","searchKeys":["isChanged","open override fun isChanged(): Boolean","com.onegravity.bloc.select.AbstractSelector.isChanged"]},{"name":"open override fun map(mapper: Mapper<Model, State>)","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.map","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/map.html","searchKeys":["map","open override fun map(mapper: Mapper<Model, State>)","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.map"]},{"name":"open override fun resetChanged()","description":"com.onegravity.bloc.select.AbstractSelector.resetChanged","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/reset-changed.html","searchKeys":["resetChanged","open override fun resetChanged()","com.onegravity.bloc.select.AbstractSelector.resetChanged"]},{"name":"open override fun select(selector: Selector<ReduxModel, Model>)","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.select","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/select.html","searchKeys":["select","open override fun select(selector: Selector<ReduxModel, Model>)","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.select"]},{"name":"open override fun send(action: Action)","description":"com.onegravity.bloc.BlocImpl.send","location":"bloc-core/com.onegravity.bloc/-bloc-impl/send.html","searchKeys":["send","open override fun send(action: Action)","com.onegravity.bloc.BlocImpl.send"]},{"name":"open override fun send(proposal: Proposal)","description":"com.onegravity.bloc.state.BlocStateImpl.send","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-impl/send.html","searchKeys":["send","open override fun send(proposal: Proposal)","com.onegravity.bloc.state.BlocStateImpl.send"]},{"name":"open override fun send(value: Proposal)","description":"com.onegravity.bloc.state.redux.ReduxBlocState.send","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state/send.html","searchKeys":["send","open override fun send(value: Proposal)","com.onegravity.bloc.state.redux.ReduxBlocState.send"]},{"name":"open override fun signalChanged()","description":"com.onegravity.bloc.select.AbstractSelector.signalChanged","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/signal-changed.html","searchKeys":["signalChanged","open override fun signalChanged()","com.onegravity.bloc.select.AbstractSelector.signalChanged"]},{"name":"open override fun w(msg: String)","description":"com.onegravity.bloc.utils.LoggerImpl.w","location":"bloc-core/com.onegravity.bloc.utils/-logger-impl/w.html","searchKeys":["w","open override fun w(msg: String)","com.onegravity.bloc.utils.LoggerImpl.w"]},{"name":"open override val equalityCheck: EqualityCheckFn","description":"com.onegravity.bloc.select.InputField.equalityCheck","location":"bloc-core/com.onegravity.bloc.select/-input-field/equality-check.html","searchKeys":["equalityCheck","open override val equalityCheck: EqualityCheckFn","com.onegravity.bloc.select.InputField.equalityCheck"]},{"name":"open override val recomputations: Long","description":"com.onegravity.bloc.select.AbstractSelector.recomputations","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/recomputations.html","searchKeys":["recomputations","open override val recomputations: Long","com.onegravity.bloc.select.AbstractSelector.recomputations"]},{"name":"open override val sideEffects: <ERROR CLASS><Value>","description":"com.onegravity.bloc.BlocImpl.sideEffects","location":"bloc-core/com.onegravity.bloc/-bloc-impl/side-effects.html","searchKeys":["sideEffects","open override val sideEffects: <ERROR CLASS><Value>","com.onegravity.bloc.BlocImpl.sideEffects"]},{"name":"open override val value: State","description":"com.onegravity.bloc.BlocImpl.value","location":"bloc-core/com.onegravity.bloc/-bloc-impl/value.html","searchKeys":["value","open override val value: State","com.onegravity.bloc.BlocImpl.value"]},{"name":"open override val value: State","description":"com.onegravity.bloc.state.BlocStateImpl.value","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-impl/value.html","searchKeys":["value","open override val value: State","com.onegravity.bloc.state.BlocStateImpl.value"]},{"name":"open override val value: State","description":"com.onegravity.bloc.state.redux.ReduxBlocState.value","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state/value.html","searchKeys":["value","open override val value: State","com.onegravity.bloc.state.redux.ReduxBlocState.value"]},{"name":"open override var initialState: State","description":"com.onegravity.bloc.state.BlocStateBuilderImpl.initialState","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-builder-impl/initial-state.html","searchKeys":["initialState","open override var initialState: State","com.onegravity.bloc.state.BlocStateBuilderImpl.initialState"]},{"name":"open override var initialState: State","description":"com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.initialState","location":"bloc-core/com.onegravity.bloc.state/-simple-bloc-state-builder-impl/initial-state.html","searchKeys":["initialState","open override var initialState: State","com.onegravity.bloc.state.SimpleBlocStateBuilderImpl.initialState"]},{"name":"open override var initialState: State","description":"com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.initialState","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state-builder-impl/initial-state.html","searchKeys":["initialState","open override var initialState: State","com.onegravity.bloc.state.redux.ReduxBlocStateBuilderImpl.initialState"]},{"name":"open suspend override fun collect(collector: <ERROR CLASS><State>)","description":"com.onegravity.bloc.BlocImpl.collect","location":"bloc-core/com.onegravity.bloc/-bloc-impl/collect.html","searchKeys":["collect","open suspend override fun collect(collector: <ERROR CLASS><State>)","com.onegravity.bloc.BlocImpl.collect"]},{"name":"open suspend override fun collect(collector: <ERROR CLASS><State>)","description":"com.onegravity.bloc.state.BlocStateImpl.collect","location":"bloc-core/com.onegravity.bloc.state/-bloc-state-impl/collect.html","searchKeys":["collect","open suspend override fun collect(collector: <ERROR CLASS><State>)","com.onegravity.bloc.state.BlocStateImpl.collect"]},{"name":"open suspend override fun collect(collector: <ERROR CLASS><State>)","description":"com.onegravity.bloc.state.redux.ReduxBlocState.collect","location":"bloc-core/com.onegravity.bloc.state.redux/-redux-bloc-state/collect.html","searchKeys":["collect","open suspend override fun collect(collector: <ERROR CLASS><State>)","com.onegravity.bloc.state.redux.ReduxBlocState.collect"]},{"name":"open val backPressedHandler: <ERROR CLASS>","description":"com.onegravity.bloc.context.DefaultBlocContext.backPressedHandler","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/back-pressed-handler.html","searchKeys":["backPressedHandler","open val backPressedHandler: <ERROR CLASS>","com.onegravity.bloc.context.DefaultBlocContext.backPressedHandler"]},{"name":"open val instanceKeeper: <ERROR CLASS>","description":"com.onegravity.bloc.context.DefaultBlocContext.instanceKeeper","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/instance-keeper.html","searchKeys":["instanceKeeper","open val instanceKeeper: <ERROR CLASS>","com.onegravity.bloc.context.DefaultBlocContext.instanceKeeper"]},{"name":"open val lifecycle: <ERROR CLASS>","description":"com.onegravity.bloc.context.DefaultBlocContext.lifecycle","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/lifecycle.html","searchKeys":["lifecycle","open val lifecycle: <ERROR CLASS>","com.onegravity.bloc.context.DefaultBlocContext.lifecycle"]},{"name":"open val memoizer: <ERROR CLASS>","description":"com.onegravity.bloc.select.AbstractSelector.memoizer","location":"bloc-core/com.onegravity.bloc.select/-abstract-selector/memoizer.html","searchKeys":["memoizer","open val memoizer: <ERROR CLASS>","com.onegravity.bloc.select.AbstractSelector.memoizer"]},{"name":"open val stateKeeper: <ERROR CLASS>","description":"com.onegravity.bloc.context.DefaultBlocContext.stateKeeper","location":"bloc-core/com.onegravity.bloc.context/-default-bloc-context/state-keeper.html","searchKeys":["stateKeeper","open val stateKeeper: <ERROR CLASS>","com.onegravity.bloc.context.DefaultBlocContext.stateKeeper"]},{"name":"suspend fun runInitializer(initializer: Initializer<State, Action>)","description":"com.onegravity.bloc.BlocImpl.runInitializer","location":"bloc-core/com.onegravity.bloc/-bloc-impl/run-initializer.html","searchKeys":["runInitializer","suspend fun runInitializer(initializer: Initializer<State, Action>)","com.onegravity.bloc.BlocImpl.runInitializer"]},{"name":"suspend fun runReducer(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>): Boolean","description":"com.onegravity.bloc.BlocImpl.runReducer","location":"bloc-core/com.onegravity.bloc/-bloc-impl/run-reducer.html","searchKeys":["runReducer","suspend fun runReducer(reducer: ReducerNoAction<State, Effect<Proposal, SideEffect>>): Boolean","com.onegravity.bloc.BlocImpl.runReducer"]},{"name":"suspend fun runThunk(thunk: ThunkNoAction<State, Action>)","description":"com.onegravity.bloc.BlocImpl.runThunk","location":"bloc-core/com.onegravity.bloc/-bloc-impl/run-thunk.html","searchKeys":["runThunk","suspend fun runThunk(thunk: ThunkNoAction<State, Action>)","com.onegravity.bloc.BlocImpl.runThunk"]},{"name":"val action: A","description":"com.onegravity.bloc.utils.ThunkContext.action","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context/action.html","searchKeys":["action","val action: A","com.onegravity.bloc.utils.ThunkContext.action"]},{"name":"val action: Action","description":"com.onegravity.bloc.utils.ReducerContext.action","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context/action.html","searchKeys":["action","val action: Action","com.onegravity.bloc.utils.ReducerContext.action"]},{"name":"val byRefEqualityCheck: EqualityCheckFn","description":"com.onegravity.bloc.select.byRefEqualityCheck","location":"bloc-core/com.onegravity.bloc.select/by-ref-equality-check.html","searchKeys":["byRefEqualityCheck","val byRefEqualityCheck: EqualityCheckFn","com.onegravity.bloc.select.byRefEqualityCheck"]},{"name":"val byValEqualityCheck: EqualityCheckFn","description":"com.onegravity.bloc.select.byValEqualityCheck","location":"bloc-core/com.onegravity.bloc.select/by-val-equality-check.html","searchKeys":["byValEqualityCheck","val byValEqualityCheck: EqualityCheckFn","com.onegravity.bloc.select.byValEqualityCheck"]},{"name":"val clazz: KClass<ChildClazz>","description":"com.onegravity.bloc.utils.Matcher.clazz","location":"bloc-core/com.onegravity.bloc.utils/-matcher/clazz.html","searchKeys":["clazz","val clazz: KClass<ChildClazz>","com.onegravity.bloc.utils.Matcher.clazz"]},{"name":"val coroutineScope: <ERROR CLASS>","description":"com.onegravity.bloc.BlocImpl.coroutineScope","location":"bloc-core/com.onegravity.bloc/-bloc-impl/coroutine-scope.html","searchKeys":["coroutineScope","val coroutineScope: <ERROR CLASS>","com.onegravity.bloc.BlocImpl.coroutineScope"]},{"name":"val coroutineScope: <ERROR CLASS>","description":"com.onegravity.bloc.utils.ReducerContext.coroutineScope","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context/coroutine-scope.html","searchKeys":["coroutineScope","val coroutineScope: <ERROR CLASS>","com.onegravity.bloc.utils.ReducerContext.coroutineScope"]},{"name":"val dispatch: Dispatcher<Action>","description":"com.onegravity.bloc.utils.InitializerContext.dispatch","location":"bloc-core/com.onegravity.bloc.utils/-initializer-context/dispatch.html","searchKeys":["dispatch","val dispatch: Dispatcher<Action>","com.onegravity.bloc.utils.InitializerContext.dispatch"]},{"name":"val dispatch: Dispatcher<Action>","description":"com.onegravity.bloc.utils.ThunkContext.dispatch","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context/dispatch.html","searchKeys":["dispatch","val dispatch: Dispatcher<Action>","com.onegravity.bloc.utils.ThunkContext.dispatch"]},{"name":"val dispatch: Dispatcher<Action>","description":"com.onegravity.bloc.utils.ThunkContextNoAction.dispatch","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context-no-action/dispatch.html","searchKeys":["dispatch","val dispatch: Dispatcher<Action>","com.onegravity.bloc.utils.ThunkContextNoAction.dispatch"]},{"name":"val expectsProposal: Boolean","description":"com.onegravity.bloc.utils.MatcherReducer.expectsProposal","location":"bloc-core/com.onegravity.bloc.utils/-matcher-reducer/expects-proposal.html","searchKeys":["expectsProposal","val expectsProposal: Boolean","com.onegravity.bloc.utils.MatcherReducer.expectsProposal"]},{"name":"val fn: S.() -> I","description":"com.onegravity.bloc.select.InputField.fn","location":"bloc-core/com.onegravity.bloc.select/-input-field/fn.html","searchKeys":["fn","val fn: S.() -> I","com.onegravity.bloc.select.InputField.fn"]},{"name":"val fragment: Fragment","description":"com.onegravity.bloc.utils.FragmentViewBindingDelegate.fragment","location":"bloc-core/com.onegravity.bloc.utils/-fragment-view-binding-delegate/fragment.html","searchKeys":["fragment","val fragment: Fragment","com.onegravity.bloc.utils.FragmentViewBindingDelegate.fragment"]},{"name":"val getState: <ERROR CLASS><State>","description":"com.onegravity.bloc.utils.ThunkContext.getState","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context/get-state.html","searchKeys":["getState","val getState: <ERROR CLASS><State>","com.onegravity.bloc.utils.ThunkContext.getState"]},{"name":"val getState: <ERROR CLASS><State>","description":"com.onegravity.bloc.utils.ThunkContextNoAction.getState","location":"bloc-core/com.onegravity.bloc.utils/-thunk-context-no-action/get-state.html","searchKeys":["getState","val getState: <ERROR CLASS><State>","com.onegravity.bloc.utils.ThunkContextNoAction.getState"]},{"name":"val matcher: Matcher<Action, Action>?","description":"com.onegravity.bloc.utils.MatcherReducer.matcher","location":"bloc-core/com.onegravity.bloc.utils/-matcher-reducer/matcher.html","searchKeys":["matcher","val matcher: Matcher<Action, Action>?","com.onegravity.bloc.utils.MatcherReducer.matcher"]},{"name":"val matcher: Matcher<Action, Action>?","description":"com.onegravity.bloc.utils.MatcherThunk.matcher","location":"bloc-core/com.onegravity.bloc.utils/-matcher-thunk/matcher.html","searchKeys":["matcher","val matcher: Matcher<Action, Action>?","com.onegravity.bloc.utils.MatcherThunk.matcher"]},{"name":"val onBackPressedDispatcher: OnBackPressedDispatcher? = null","description":"com.onegravity.bloc.ActivityBlocContext.onBackPressedDispatcher","location":"bloc-core/com.onegravity.bloc/-activity-bloc-context/on-back-pressed-dispatcher.html","searchKeys":["onBackPressedDispatcher","val onBackPressedDispatcher: OnBackPressedDispatcher? = null","com.onegravity.bloc.ActivityBlocContext.onBackPressedDispatcher"]},{"name":"val proposal: Proposal?","description":"com.onegravity.bloc.utils.Effect.proposal","location":"bloc-core/com.onegravity.bloc.utils/-effect/proposal.html","searchKeys":["proposal","val proposal: Proposal?","com.onegravity.bloc.utils.Effect.proposal"]},{"name":"val reducer: Reducer<State, Action, Proposal>","description":"com.onegravity.bloc.utils.MatcherReducer.reducer","location":"bloc-core/com.onegravity.bloc.utils/-matcher-reducer/reducer.html","searchKeys":["reducer","val reducer: Reducer<State, Action, Proposal>","com.onegravity.bloc.utils.MatcherReducer.reducer"]},{"name":"val savedStateRegistry: SavedStateRegistry? = null","description":"com.onegravity.bloc.ActivityBlocContext.savedStateRegistry","location":"bloc-core/com.onegravity.bloc/-activity-bloc-context/saved-state-registry.html","searchKeys":["savedStateRegistry","val savedStateRegistry: SavedStateRegistry? = null","com.onegravity.bloc.ActivityBlocContext.savedStateRegistry"]},{"name":"val scope: <ERROR CLASS>","description":"com.onegravity.bloc.utils.ReducerContextNoAction.scope","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context-no-action/scope.html","searchKeys":["scope","val scope: <ERROR CLASS>","com.onegravity.bloc.utils.ReducerContextNoAction.scope"]},{"name":"val selectorList2: <ERROR CLASS>","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.selectorList2","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/selector-list2.html","searchKeys":["selectorList2","val selectorList2: <ERROR CLASS>","com.onegravity.bloc.select.SelectorSubscriberBuilder.selectorList2"]},{"name":"val selectorList: <ERROR CLASS>","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.selectorList","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/selector-list.html","searchKeys":["selectorList","val selectorList: <ERROR CLASS>","com.onegravity.bloc.select.SelectorSubscriberBuilder.selectorList"]},{"name":"val sideEffects: List<SideEffect>","description":"com.onegravity.bloc.utils.Effect.sideEffects","location":"bloc-core/com.onegravity.bloc.utils/-effect/side-effects.html","searchKeys":["sideEffects","val sideEffects: List<SideEffect>","com.onegravity.bloc.utils.Effect.sideEffects"]},{"name":"val state: State","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.state","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/state.html","searchKeys":["state","val state: State","com.onegravity.bloc.select.SelectorSubscriberBuilder.state"]},{"name":"val state: State","description":"com.onegravity.bloc.utils.InitializerContext.state","location":"bloc-core/com.onegravity.bloc.utils/-initializer-context/state.html","searchKeys":["state","val state: State","com.onegravity.bloc.utils.InitializerContext.state"]},{"name":"val state: State","description":"com.onegravity.bloc.utils.ReducerContext.state","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context/state.html","searchKeys":["state","val state: State","com.onegravity.bloc.utils.ReducerContext.state"]},{"name":"val state: State","description":"com.onegravity.bloc.utils.ReducerContextNoAction.state","location":"bloc-core/com.onegravity.bloc.utils/-reducer-context-no-action/state.html","searchKeys":["state","val state: State","com.onegravity.bloc.utils.ReducerContextNoAction.state"]},{"name":"val store: <ERROR CLASS><State>","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.store","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/store.html","searchKeys":["store","val store: <ERROR CLASS><State>","com.onegravity.bloc.select.SelectorSubscriberBuilder.store"]},{"name":"val thunk: Thunk<State, Action, A>","description":"com.onegravity.bloc.utils.MatcherThunk.thunk","location":"bloc-core/com.onegravity.bloc.utils/-matcher-thunk/thunk.html","searchKeys":["thunk","val thunk: Thunk<State, Action, A>","com.onegravity.bloc.utils.MatcherThunk.thunk"]},{"name":"val viewBindingFactory: (View) -> T","description":"com.onegravity.bloc.utils.FragmentViewBindingDelegate.viewBindingFactory","location":"bloc-core/com.onegravity.bloc.utils/-fragment-view-binding-delegate/view-binding-factory.html","searchKeys":["viewBindingFactory","val viewBindingFactory: (View) -> T","com.onegravity.bloc.utils.FragmentViewBindingDelegate.viewBindingFactory"]},{"name":"val viewModelStore: ViewModelStore? = null","description":"com.onegravity.bloc.ActivityBlocContext.viewModelStore","location":"bloc-core/com.onegravity.bloc/-activity-bloc-context/view-model-store.html","searchKeys":["viewModelStore","val viewModelStore: ViewModelStore? = null","com.onegravity.bloc.ActivityBlocContext.viewModelStore"]},{"name":"var dispatcher: <ERROR CLASS>","description":"com.onegravity.bloc.BlocBuilder.dispatcher","location":"bloc-core/com.onegravity.bloc/-bloc-builder/dispatcher.html","searchKeys":["dispatcher","var dispatcher: <ERROR CLASS>","com.onegravity.bloc.BlocBuilder.dispatcher"]},{"name":"var withAnyChangeFun: () -> Unit? = null","description":"com.onegravity.bloc.select.SelectorSubscriberBuilder.withAnyChangeFun","location":"bloc-core/com.onegravity.bloc.select/-selector-subscriber-builder/with-any-change-fun.html","searchKeys":["withAnyChangeFun","var withAnyChangeFun: () -> Unit? = null","com.onegravity.bloc.select.SelectorSubscriberBuilder.withAnyChangeFun"]}]
